/*
Dark World Disco
a stonescript rhythm game by Kangasaur

version: 0.1 (ALPHA)

This is a playtest build -- it is not final!
To play: type "import Games/Rhythm" and go to Deadwood Waterfall

Mobile users: this script is too long for the Mind Stone
and mobile clipboards to handle. To play, set your import URL to
my github page:
"https://raw.githubusercontent.com/Kangasaur/Stonescript/refs/heads/main/"

(see https://discord.com/channels/423242655498240000/597668520888762388/1234924102897107044
for guidance on setting up imports on mobile. For this script, you don't need the
local server; just set the file string to the URL above)
*/

var note_sprites = [ascii
#.-.
( ← )
#`-´
asciiend, ascii
#.-.
( ↓ )
#`-´
asciiend, ascii
#.-.
( ↑ )
#`-´
asciiend, ascii
#.-.
( → )
#`-´
asciiend]

var title_sprite = ascii
#########################################__. .─._
###################################.──'./  ,: ,. '
########################___##.──'¯K._ <'\ '._.`-´ )
│¯\# ∆##|¯)#| /########|   '.'-. ." _> ¯)"__.''──"
|_/#/#\#│¯\#|¯\########'.|¯\ |.| '¯|.──"
\###/#/¯\#|¯)#|###│¯\###|`-' /.──'¯
#\^/##\_/#│¯\#│__#|_/###'.──'
asciiend

var disco_sprite = ascii
#######││
#######││
#######││
#######││
#######││
#######││
#######││
#######\/
####.-"¯¯"-.
##.´ ░ ▒  ▒ ".
#/░ ▒   ░ ░▓▒ \
|▒   ▒░  ▒▒▓▓█▒│
│ ░▒ ░ ▒   ▒▓▒ |
#\  ░   ░ ░ ▒ /
##". ▒░  ▒  .´
####"-.__.-"
%%
#######││
#######││
#######││
#######││
#######││
#######││
#######││
#######\/
####.-"¯¯"-.
##,"▒  ░  ░ `.
#/ ▒░  ▒ ▒░▓▒ \
│░   ░ ▒ ░▒▓█▓▒|
|  ▒  ▒░   ▒▒▓ │
#\ ▒     ▒  ░ /
##`. ▒   ░  ,"
####"-.__.-"
%%
#######││
#######││
#######││
#######││
#######││
#######││
#######││
#######\/
####.-"¯¯"-.
##.´░   ▒  ▒".
#/ ▒   ░ ░░▒▓░\
|   ▒  ░▒ ▒▓█▓▒│
│  ░▒ ▒    ▒▒▓ |
#\ ░     ░  ░▒/
##". ░▒   ▒ .´
####"-.__.-"
%%
#######││
#######││
#######││
#######││
#######││
#######││
#######││
#######\/
####.-"¯¯"-.
##," ▒  ░  ░`.
#/▒░    ▒ ▒▒▓░\
│   ░ ▒ ░ ▒▓▓█▒|
| ▒ ░▒░    ▒▓▒ │
#\  ▒   ▒ ▒ ░░/
##`.  ▒   ░ ,"
####"-.__.-"
asciiend

var disco_sprite_small = ascii
####│
####│
####│
##.─┴─,
#/ ▒  ▒\
(  ░ ▒▓▓)
#\▒  ░░/
##"───´
%%
####│
####│
####│
##,─┴─.
#/ ░  ░\
(▒  ▒▓▓▒)
#\░  ░▒/
##`───"
%%
####│
####│
####│
##.─┴─,
#/▒  ▒ \
(░  ░▓▓▒)
#\ ▒ ░░/
##"───´
%%
####│
####│
####│
##,─┴─.
#/░  ░ \
(  ▒ ▒▓▓)
#\ ░ ▒░/
##`───"
asciiend

// Map timings

// deadwood: 145 bpm, 2383 frames
var map_deadwood_times = [0, 12, 25, 37, 50, 62, 74, 87, 99, 112, 124, 137,
^ 149, 161, 174, 186, 199, 211, 236, 248, 261, 273, 286,
^ 298, 310, 323, 335, 348, 360, 372, 385, 397, 410, 422, 434,
^ 447, 459, 472, 484, 497, 509, 534, 546, 559, 571, 583,
^ 596, 632, 633, 646, 658, 670, 707, 708, 720, 732,
^ 745, 781, 782, 794, 807, 819, 856, 857, 869, 881,
^ 906, 913, 919, 931, 943, 956, 981, 988, 993, 1006, 1018, 1030,
^ 1055, 1062, 1068, 1080, 1092, 1105, 1117, 1130, 1136, 1142, 1154, 1167, 1179,
^ 1192, 1217, 1223, 1229, 1235, 1241, 1248, 1254, 1260, 1266, 1279, 1322,
^ 1328, 1335, 1353, 1372, 1378, 1384, 1390, 1397, 1403, 1409, 1415, 1428, 1476,
^ 1477, 1484, 1490, 1501, 1502, 1513, 1514, 1551, 1552, 1563,
^ 1564, 1576, 1577, 1588, 1589, 1625, 1626, 1638,
^ 1639, 1650, 1651, 1662, 1663, 1695, 1701, 1707, 1713, 1719, 1726, 1774, 1775, 1787,
^ 1788, 1849, 1850, 1862, 1868, 1874, 1923, 1924, 1936,
^ 1937, 1998, 1999, 2010, 2011, 2022, 2023, 2035, 2036, 2067,
^ 2073, 2080, 2086, 2092, 2098, 2148, 2154, 2160, 2222, 2228,
^ 2234, 2297, 2303, 2309, 2371, 2377, 2383]

var map_deadwood_notes = [0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1,
^ 0, 1, 2, 3, 2, 1, 3, 2, 1, 1, 0,
^ 0, 1, 2, 3, 2, 1, 0, 1, 2, 3, 2, 1,
^ 0, 1, 2, 3, 2, 1, 3, 2, 0, 2, 1,
^ 4, 8, 3, 2, 1, 5, 9, 3, 2, 1,
^ 6, 10, 3, 2, 1, 7, 11, 1, 2, 3,
^ 0, 1, 2, 3, 2, 0, 0, 1, 2, 3, 2, 0,
^ 0, 1, 2, 3, 2, 1, 0, 0, 1, 2, 3, 2, 1,
^ 4, 8, 0, 1, 2, 3, 2, 1, 2, 0, 7, 11,
^ 2, 1, 0, 0, 1, 2, 3, 2, 1, 0, 2, 4, 8,
^ 1, 2, 5, 9, 7, 11, 6, 10, 5, 9,
^ 4, 8, 7, 11, 6, 10, 5, 9,
^ 4, 8, 6, 10, 5, 9, 2, 3, 2, 1, 4, 8, 6, 10,
^ 5, 9, 0, 0, 3, 4, 8, 5, 9,
^ 6, 10, 7, 11, 6, 10, 5, 9, 4, 8,
^ 2, 1, 2, 1, 0, 2, 2, 0, 2, 2,
^ 0, 2, 2, 0, 2, 2, -1]

// xylo: 193 bpm, 1380 frames
var map_xylo_times = [0, 9, 14, 23, 32, 47, 56,
^ 65, 75, 79, 88, 98, 112, 121,
^ 131, 140, 144, 154, 163, 172, 177, 187,
^ 196, 205, 210, 219, 228, 238, 242, 252,
^ 261, 293, 294, 326, 358, 359, 368,
^ 392, 423, 424, 457, 488, 489, 499, 508, 517,
^ 522, 554, 555, 588, 619, 620, 629,
^ 653, 684, 685, 718, 749, 750, 760, 769, 778,
^ 783, 788, 793, 798, 807, 811, 816, 821, 826, 830,
^ 839, 844, 849, 854, 863, 867, 872, 882, 886, 891, 895, 900, 905, 914, 919, 923,
^ 928, 946, 947, 956, 961, 970, 979, 989, 993,
^ 1002, 1020, 1021, 1030, 1035, 1045, 1054, 1063, 1068, 
^ 1078, 1087, 1091, 1096, 1106, 1110,
^ 1115, 1119, 1124, 1128, 1133, 1138, 1142, 1147, 1152,
^ 1161, 1166, 1171, 1180, 1184, 1189, 1194, 1199, 1203, 1212, 1217, 1222,
^ 1227, 1236, 1246, 1255, 1264, 1274, 1283, 1292, 1302, 1334,
^ 1343, 1348, 1352, 1357, 1362, 1367, 1371, 1376, 1380]

var map_xylo_notes = [0, 3, 1, 2, 0, 1, 2,
^ 0, 3, 1, 2, 0, 1, 2,
^ 0, 3, 1, 2, 0, 3, 1, 2,
^ 0, 3, 1, 2, 0, 3, 1, 2,
^ 7, 11, 2, 7, 11, 0, 2,
^ 7, 11, 2, 5, 9, 2, 0, 1, 2,
^ 7, 11, 2, 7, 11, 0, 2,
^ 7, 11, 2, 5, 9, 2, 3, 2, 1,
^ 0, 0, 1, 2, 1, 0, 3, 2, 1, 3,
^ 3, 2, 1, 3, 0, 1, 2, 1, 0, 2, 1, 0, 3, 3, 2, 1,
^ 7, 11, 2, 0, 1, 3, 2, 0, 1,
^ 7, 11, 2, 0, 1, 3, 2, 0, 1,
^ 0, 0, 1, 2, 1, 0, 2, 1, 0, 3, 2, 1, 3, 2, 1,
^ 0, 1, 2, 1, 0, 2, 1, 0, 3, 3, 2, 1,
^ 2, 1, 2, 1, 3, 2, 1, 0, 5, 9,
^ 0, 1, 2, 3, 0, 1, 2, 3, -1]

// caves: 112 bpm, 2057 frames
var map_caves_times = [0, 8, 16, 24, 32, 40, 137, 145, 153, 161, 169, 177,
^ 257, 265, 273, 281, 289, 394, 402, 410, 418, 426, 434, 442, 450, 458, 498, 506,
^ 514, 522, 530, 538, 546, 562, 579, 595, 611, 627,
^ 643, 651, 659, 667, 675, 683, 691, 707, 723, 739, 755, 763,
^ 771, 779, 787, 795, 804, 820, 836, 852, 868, 884,
^ 900, 908, 916, 924, 932, 940, 948, 956, 964, 972,
^ 1029, 1037, 1045, 1053, 1061, 1069, 1077, 1085,
^ 1101, 1109, 1117, 1125, 1133, 1141, 1149,
^ 1157, 1165, 1173, 1181, 1189, 1197, 1205, 1213,
^ 1229, 1238, 1246, 1254, 1262, 1270, 1278,
^ 1286, 1310, 1334, 1358, 1382, 1390, 1398, 1406,
^ 1414, 1438, 1463, 1487, 1511, 1519, 1527, 1535,
^ 1543, 1567, 1591, 1615, 1639, 1647, 1655, 1663,
^ 1671, 1696, 1720, 1744, 1768, 1776, 1784, 1792,
^ 1800, 1824, 1848, 1872, 1896, 1904, 1913, 1921,
^ 1929, 1953, 1977, 2057]

var map_caves_notes = [1, 2, 3, 1, 2, 3, 3, 2, 3, 2, 1, 0,
^ 1, 2, 1, 2, 3, 3, 2, 3, 2, 1, 0, 1, 2, 3, 1, 0,
^ 1, 2, 1, 2, 3, 2, 3, 2, 1, 0, 0, 3, 2, 3, 2, 1, 0, 3, 2, 1, 1, 0,
^ 1, 2, 1, 2, 3, 2, 3, 2, 1, 0, 0, 3, 2, 3, 2, 1, 0, 1, 2, 3,
^ 0, 0, 1, 0, 2, 0, 0, 1, 0, 1, 0, 3, 0, 0, 1,
^ 0, 0, 1, 0, 2, 0, 0, 1, 0, 1, 3, 2, 3, 2, 2,
^ 3, 3, 3, 3, 2, 3, 2, 1, 0, 0, 0, 0, 0, 1, 3, 2,
^ 3, 3, 3, 3, 2, 3, 2, 1, 0, 0, 0, 0, 0, 1, 3, 2,
^ 1, 1, 1, 1, 2, 3, 2, 1, 0, 0, 0, -1]

// bolesh: 171 bpm, 1347 frames
var map_bolesh_times = [0, 37, 42, 79, 84, 87, 90, 100, 103, 105,
^ 126, 137, 147, 158, 168, 205, 211, 247,
^ 253, 256, 258, 268, 271, 274,
^ 295, 300, 305, 310, 316, 321, 326, 331,
^ 337, 373, 379, 416, 421, 432, 442, 453, 463, 474, 484, 495,
^ 505, 546, 547, 567, 568, 578, 579, 588, 589, 620, 621, 626, 632, 642, 645, 663,
^ 674, 679, 684, 689, 700, 705, 710, 721, 726, 731, 742, 747,
^ 758, 763, 773, 789, 794,
^ 842, 847, 853, 858, 868, 874, 879, 889, 895, 900, 910, 916,
^ 926, 931, 942, 958, 963, 979, 989, 1000,
^ 1011, 1016, 1021, 1026, 1037, 1042, 1047, 1053, 1060, 1068, 1074, 1084, 1089,
^ 1100, 1105, 1111, 1121, 1126, 1131, 1137, 1142, 1147, 1152, 1168, 1173,
^ 1184, 1189, 1194, 1205, 1211, 1216, 1221, 1229, 1237, 1242, 1250, 1258,
^ 1263, 1271, 1279, 1284, 1305, 1347]

var map_bolesh_notes = [4, 8, 5, 9, 0, 1, 0, 3, 2, 3,
^ 2, 1, 3, 1, 4, 8, 5, 9, 0, 1, 0, 3, 2, 3,
^ 3, 2, 1, 0, 3, 0, 1, 2,
^ 5, 9, 6, 10, 2, 1, 0, 2, 3, 2, 1, 3,
^ 6, 10, 7, 11, 6, 10, 7, 11, 6, 10, 1, 2, 3, 3, 3, 3,
^ 0, 0, 3, 2, 2, 1, 0, 0, 3, 2, 2, 1,
^ 2, 3, 1, 0, 1,
^ 0, 0, 3, 2, 2, 1, 0, 0, 3, 2, 2, 1,
^ 2, 3, 1, 2, 3, 3, 2, 0,
^ 1, 0, 1, 2, 1, 2, 3, 2, 3, 2, 1, 0, 1,
^ 1, 2, 3, 1, 1, 3, 2, 0, 2, 1, 0, 1,
^ 0, 1, 2, 1, 2, 3, 2, 3, 2, 1, 0, 1,
^ 3, 2, 1, 6, 10, -1]

// mushroom: 140 bpm, 2314 frames
var map_mushroom_times = [0, 13, 26, 39, 51, 64, 77, 90, 103, 116, 122, 129,
^ 141, 154, 167, 180, 193, 206, 219, 231, 244, 257, 263, 270,
^ 283, 296, 309, 321, 334, 340, 347, 353, 360, 373, 386, 399, 405, 411,
^ 424, 437, 450, 463, 476, 482, 489, 495, 501, 514, 540, 546, 553, 559,
^ 566, 579, 636, 643, 649, 656, 681, 687, 694, 700,
^ 707, 720, 777, 784, 790, 797, 823, 829, 836, 842,
^ 849, 861, 919, 926, 932, 939, 964, 970, 977, 983,
^ 990, 1003, 1060, 1067, 1074, 1077, 1080,
^ 1131, 1144, 1157, 1170, 1183, 1189, 1196, 1202, 1209, 1221, 1234, 1247, 1253, 1260,
^ 1273, 1286, 1299, 1311, 1324, 1330, 1337, 1343, 1350, 1363, 1376, 1389, 1395, 1401,
^ 1414, 1427, 1440, 1453, 1479, 1491, 1504, 1517, 1530, 1556,
^ 1569, 1659, 1671, 1684, 1697,
^ 1723, 1736, 1749, 1761, 1787, 1800, 1813, 1826, 1839, 1864,
^ 1877, 1915, 1916, 1953, 1954, 1979, 1980, 1992, 1993, 2005, 2006, 2082,
^ 2083, 2096, 2109, 2121, 2134, 2147, 2153, 2160,
^ 2173, 2186, 2199, 2211, 2224, 2237, 2250, 2263, 2276, 2289, 2295, 2301, 2314]

var map_mushroom_notes = [0, 1, 2, 0, 1, 3, 0, 1, 2, 3, 2, 1,
^ 0, 1, 2, 0, 1, 3, 0, 1, 2, 3, 2, 1,
^ 0, 1, 2, 0, 1, 3, 2, 0, 1, 1, 2, 3, 2, 1,
^ 0, 1, 2, 0, 1, 3, 2, 0, 1, 1, 1, 2, 1, 2,
^ 3, 0, 3, 2, 0, 1, 1, 2, 1, 2,
^ 1, 3, 3, 2, 0, 1, 1, 2, 1, 2,
^ 3, 0, 2, 3, 1, 0, 1, 2, 1, 2,
^ 1, 3, 3, 2, 3, 2, 1,
^ 0, 1, 2, 0, 1, 3, 2, 0, 1, 1, 2, 3, 2, 1,
^ 0, 1, 2, 0, 1, 3, 2, 0, 1, 1, 2, 3, 2, 1,
^ 0, 1, 2, 2, 3, 0, 1, 2, 2, 3,
^ 4, 8, 1, 3, 2,
^ 0, 1, 2, 2, 3, 0, 1, 2, 2, 3,
^ 4, 8, 6, 10, 5, 9, 6, 10, 7, 11, 5, 9,
^ 2, 3, 0, 1, 2, 3, 2, 1,
^ 0, 1, 2, 0, 1, 3, 0, 1, 2, 3, 2, 1, -1]

// angry shroom: 172.5-191 variable bpm, 1218 frames
var map_angry_times = [0, 15, 31, 42, 57, 73,
^ 83, 99, 115, 130, 136, 141, 146, 151, 157, 162,
^ 167, 177, 182, 193, 198, 209, 219, 224, 235, 240,
^ 250, 261, 266, 276, 282, 297, 303, 308, 313, 318, 323, 328,
^ 334, 344, 349, 360, 365, 376, 386, 391, 401, 407,
^ 417, 428, 433, 443, 448, 459, 469, 474, 484, 490,
^ 500, 510, 515, 525, 531, 541, 551, 556, 566, 572, 577,
^ 582, 587, 592, 597, 602, 607, 612, 617,
^ 622, 627, 632, 637, 642, 647, 652, 657,
^ 662, 667, 672, 677, 682, 687, 692, 697,
^ 702, 707, 712, 717, 721, 726, 731, 736,
^ 741, 746, 751, 756, 761, 766, 771, 776,
^ 781, 786, 791, 796, 801, 806, 811, 816,
^ 821, 826, 830, 835, 840, 845, 850, 855,
^ 860, 865, 870, 875, 880, 885, 890, 895,
^ 899, 904, 909, 914, 919, 924, 929, 934,
^ 939, 944, 949, 954, 959, 964, 969, 974,
^ 979, 984, 989, 994, 999, 1004, 1009, 1014,
^ 1019, 1024, 1029, 1034, 1039, 1044, 1049, 1054,
^ 1059, 1064, 1069, 1074, 1079, 1084, 1089, 1094,
^ 1099, 1104, 1108, 1113, 1118, 1123, 1128, 1133,
^ 1137, 1142, 1147, 1152, 1157, 1162, 1166, 1171,
^ 1176, 1181, 1186, 1191, 1197, 1202, 1207, 1212, 1218]

var map_angry_notes = [2, 2, 0, 2, 2, 0,
^ 2, 2, 0, 2, 1, 2, 3, 2, 1, 2,
^ 2, 3, 2, 3, 0, 2, 3, 2, 3, 0,
^ 2, 3, 2, 3, 0, 2, 1, 2, 3, 2, 1, 2,
^ 1, 1, 1, 1, 1, 2, 2, 2, 2, 2,
^ 3, 3, 3, 3, 3, 0, 0, 0, 0, 0,
^ 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 2,
^ 0, 2, 3, 0, 1, 2, 0, 2,
^ 3, 2, 1, 0, 2, 0, 0, 0,
^ 1, 2, 3, 0, 1, 2, 2, 2,
^ 3, 2, 1, 0, 2, 1, 2, 3,
^ 0, 2, 3, 0, 1, 2, 2, 2,
^ 3, 2, 1, 0, 2, 0, 0, 0,
^ 1, 2, 3, 0, 1, 2, 2, 2,
^ 3, 2, 1, 0, 2, 1, 2, 3,
^ 2, 1, 0, 2, 1, 0, 3, 1,
^ 2, 1, 0, 2, 1, 0, 3, 1,
^ 3, 2, 1, 0, 3, 2, 1, 0,
^ 1, 0, 2, 0, 2, 0, 3, 0,
^ 2, 1, 0, 2, 1, 0, 3, 1,
^ 2, 1, 0, 2, 1, 0, 3, 1,
^ 3, 2, 1, 0, 3, 2, 1, 3,
^ 2, 1, 3, 2, 1, 2, 1, 0, -1]

// halls: 132 bpm, 2618 frames
var map_halls_times = [0, 7, 14, 27, 41, 48, 123, 136, 150, 157,
^ 218, 225, 232, 245, 259, 266, 341, 355, 368, 375,
^ 436, 443, 450, 464, 477, 484, 491, 498, 505, 518, 532, 539,
^ 545, 552, 559, 573, 586, 593, 600, 607, 614, 627, 641, 648,
^ 668, 682, 695, 702, 709, 716, 723, 736, 750, 757,
^ 764, 771, 777, 791, 805, 812, 818, 825, 832, 845, 859, 866,
^ 873, 886, 900, 914, 921, 927, 941, 955, 968, 975,
^ 982, 995, 1009, 1023, 1030, 1036, 1050, 1064, 1077, 1084,
^ 1105, 1112, 1118, 1125, 1132, 1139, 1145, 1152, 1159, 1166, 1173,
^ 1193, 1200, 1207, 1214, 1221, 1227,
^ 1248, 1255, 1262, 1268, 1275, 1282, 1289, 1295, 1302,
^ 1316, 1323, 1330, 1336, 1343, 1350, 1357, 1364, 1371, 1377, 1384, 1391,
^ 1412, 1418, 1425, 1432, 1439, 1445, 1452, 1459, 1466, 1473, 1480, 1486, 1493, 1500,
^ 1527, 1534, 1541, 1548, 1555, 1562, 1568, 1575,
^ 1582, 1589, 1595, 1602, 1609, 1616, 1623, 1630,
^ 1636, 1643, 1650, 1657, 1664, 1671, 1677, 1684,
^ 1691, 1698, 1705, 1712, 1718, 1725, 1732, 1739,
^ 1745, 1752, 1759, 1766, 1773, 1780, 1786, 1793,
^ 1800, 1807, 1814, 1821, 1827, 1834, 1841, 1848,
^ 1855, 1862, 1868, 1875, 1882, 1889, 1895, 1902, 
^ 1909, 1916, 1923, 1930, 1936, 1943, 1950, 1957,
^ 1977, 1984, 1991, 1998, 2005, 2012, 2018, 2025, 2032, 2039, 2045,
^ 2066, 2073, 2080, 2086, 2093, 2100,
^ 2121, 2127, 2134, 2141, 2148, 2155, 2162, 2168, 2175,
^ 2189, 2195, 2202, 2209, 2216, 2223, 2230, 2236, 2243, 2250, 2257, 2264,
^ 2284, 2291, 2298, 2305, 2312, 2318, 2325, 2332, 2339, 2345, 2352, 2359, 2366, 2373,
^ 2618]

var map_halls_notes = [0, 0, 1, 2, 3, 1, 0, 1, 3, 2,
^ 0, 0, 1, 2, 3, 1, 0, 1, 3, 2,
^ 0, 0, 1, 2, 3, 1, 0, 0, 1, 2, 3, 1,
^ 0, 0, 1, 2, 3, 1, 0, 0, 0, 1, 3, 2,
^ 0, 1, 2, 0, 2, 0, 0, 1, 2, 0,
^ 2, 0, 0, 1, 2, 0, 2, 0, 0, 1, 3, 2,
^ 0, 0, 2, 0, 3, 1, 0, 2, 0, 3,
^ 1, 0, 2, 0, 3, 1, 0, 2, 2, 3,
^ 1, 2, 0, 1, 2, 3, 2, 1, 2, 0, 1,
^ 0, 1, 2, 3, 2, 1,
^ 0, 2, 3, 2, 1, 0, 1, 2, 3,
^ 0, 1, 2, 0, 1, 2, 3, 2, 1, 2, 0, 1,
^ 0, 1, 2, 3, 2, 3, 2, 1, 0, 1, 0, 3, 2, 1,
^ 1, 1, 0, 1, 2, 0, 1, 2,
^ 1, 1, 0, 1, 2, 0, 1, 2,
^ 1, 1, 0, 1, 2, 0, 1, 2,
^ 0, 0, 1, 0, 2, 0, 3, 2,
^ 1, 1, 0, 1, 2, 0, 1, 2,
^ 1, 1, 0, 1, 2, 0, 1, 2,
^ 1, 1, 0, 1, 2, 0, 1, 2,
^ 0, 0, 1, 0, 2, 0, 2, 3,
^ 1, 2, 0, 1, 2, 3, 2, 1, 2, 0, 1,
^ 0, 1, 2, 3, 2, 1,
^ 0, 2, 3, 2, 1, 0, 1, 2, 3,
^ 0, 1, 2, 0, 1, 2, 3, 2, 1, 2, 0, 1,
^ 0, 1, 2, 3, 2, 3, 2, 1, 0, 1, 0, 3, 2, 1,
^ -1]

// pallas: 156 bpm, 1846 frames
var map_pallas_times = [0, 17, 18, 35, 127, 144, 156, 162, 170, 179,
^ 185, 219, 231, 277, 288, 294, 300, 318, 323, 358, 363, 366,
^ 369, 387, 462, 473, 479, 485, 493, 502, 508, 531,
^ 542, 554, 565, 583, 594, 600, 646,
^ 658, 664, 678, 687, 692, 721, 727, 731, 735,
^ 738, 761, 762, 796, 808, 817, 825, 831, 877,
^ 923, 929, 935, 941, 946, 952, 958, 964,
^ 969, 975, 981, 987, 992, 998, 1004, 1010,
^ 1015, 1021, 1027, 1033, 1038, 1044, 1050, 1056,
^ 1062, 1068, 1073, 1079, 1085, 1091, 1096, 1102,
^ 1108, 1114, 1119, 1125, 1131, 1137, 1142, 1148,
^ 1154, 1160, 1165, 1171, 1177, 1183, 1188, 1194,
^ 1200, 1206, 1212, 1218, 1223, 1229, 1235, 1241,
^ 1246, 1252, 1258, 1264, 1269, 1275, 1281, 1287,
^  1292, 1304, 1321, 1333, 1338, 1350, 1368, 1379,
^ 1385, 1396, 1414, 1425, 1431, 1442, 1460, 1471,
^ 1477, 1488, 1506, 1518, 1523, 1535, 1552, 1564,
^ 1569, 1581, 1598, 1610, 1615, 1627, 1644, 1656,
^ 1662, 1668, 1673, 1679, 1685, 1691, 1696, 1702,
^ 1708, 1714, 1719, 1725, 1731, 1737, 1742, 1748,
^ 1754, 1765, 1777, 1788, 1800, 1812, 1823, 1835, 1846]

var map_pallas_notes = [4, 8, 3, 7, 11, 2, 3, 2, 1, 0,
^ 7, 11, 7, 11, 0, 1, 2, 3, 5, 9, 2, 1,
^ 0, 7, 11, 3, 1, 3, 2, 1, 4, 8,
^ 2, 7, 11, 2, 1, 4, 8,
^ 0, 3, 1, 3, 6, 10, 3, 2, 1,
^ 4, 8, 5, 9, 2, 2, 1, 7, 11,
^ 3, 2, 0, 3, 2, 0, 3, 2,
^ 0, 3, 2, 0, 2, 1, 1, 0,
^ 3, 2, 0, 3, 2, 0, 3, 2,
^ 0, 3, 2, 0, 3, 2, 2, 1,
^ 3, 2, 0, 3, 2, 0, 3, 2,
^ 0, 3, 2, 0, 2, 1, 1, 0,
^ 3, 2, 0, 3, 2, 0, 3, 2,
^ 0, 3, 2, 0, 3, 2, 2, 1,
^ 0, 2, 2, 2, 0, 2, 2, 2,
^ 0, 2, 2, 2, 0, 2, 2, 2,
^ 0, 2, 2, 2, 0, 2, 2, 2,
^ 0, 2, 2, 2, 0, 2, 2, 2,
^ 0, 2, 1, 2, 1, 2, 1, 2,
^ 0, 2, 1, 2, 1, 2, 1, 2,
^ 1, 1, 1, 1, 1, 1, 0, 3, -1]

// mine: 154 bpm, 2945 frames
var map_mine_times = [6, 12, 23, 29, 41, 53, 58, 64,
^ 76, 82, 94, 100, 105, 117, 123, 129, 140, 146, 152, 163,
^ 164, 170, 175, 186, 187, 193, 199, 209, 210, 216, 222, 233,
^ 234, 240, 245, 256, 257, 263, 269, 280,
^ 292, 304, 351, 362, 374, 421, 432, 444, 491, 503, 514,
^ 561, 567, 573, 579, 590, 602,
^ 631, 637, 643, 649, 661, 672, 684, 696,
^ 701, 707, 713, 719, 731, 742, 754, 766,
^ 771, 777, 783, 789, 801, 812, 830, 836,
^ 848, 853, 865, 871, 877, 888, 894, 900, 912, 918, 923, 935, 941, 947, 958,
^ 982, 1016, 1017, 1029, 1040, 1052, 1086, 1087, 1099, 1110,
^ 1122, 1156, 1157, 1169, 1181, 1192, 1226, 1227, 1239, 1251,
^ 1262, 1296, 1297, 1309, 1321, 1332, 1367, 1368, 1379, 1391,
^ 1403, 1437, 1438, 1449, 1461, 1473, 1507, 1508, 1519, 1531,
^ 1543, 1549, 1555, 1561, 1566, 1572, 1578, 1584, 1601, 1607,
^ 1619, 1631, 1642, 1654, 1666, 1677,
^ 1689, 1701, 1712, 1724, 1736, 1748, 1759, 1772, 1783, 1794,
^ 1823, 1835, 1847, 1858, 1870,
^ 1894, 1905, 1917, 1929, 1940, 1952,
^ 1964, 1975, 1987, 1999, 2010,
^ 2034, 2045, 2057, 2069, 2081, 2092,
^ 2104, 2138, 2139, 2151, 2162, 2174, 2208, 2209, 2221, 2232,
^ 2244, 2278, 2279, 2291, 2303, 2314, 2348, 2349, 2361, 2373,
^ 2384, 2418, 2419, 2431, 2443, 2455, 2489, 2490, 2501, 2513,
^ 2525, 2559, 2560, 2571, 2583, 2595, 2629, 2630, 2642, 2653,
^ 2665, 2677, 2688, 2694, 2700, 2706, 2712, 2729,
^ 2735, 2747, 2758, 2764, 2770, 2776, 2782, 2800,
^ 2805, 2817, 2829, 2835, 2840, 2846, 2852, 2870,
^ 2875, 2887, 2899, 2905, 2910, 2916, 2922, 2933, 2934, 2945]

var map_mine_notes = [1, 3, 1, 2, 2, 1, 2, 0,
^ 1, 6, 10, 1, 6, 10, 1, 6, 10, 1, 6, 10,
^ 1, 1, 6, 10, 1, 1, 6, 10, 1, 1, 6, 10,
^ 1, 3, 6, 10, 1, 3, 6, 10,
^ 1, 0, 3, 2, 0, 3, 2, 1, 3, 2, 1,
^ 2, 0, 1, 1, 0, 1,
^ 3, 1, 2, 2, 1, 2, 1, 2,
^ 3, 1, 2, 2, 1, 2, 1, 2,
^ 3, 2, 2, 3, 2, 3, 2, 3,
^ 1, 6, 10, 1, 6, 10, 1, 6, 10, 1, 6, 10, 1, 6, 10,
^ 6, 10, 0, 1, 2, 7, 11, 0, 1, 2,
^ 7, 11, 0, 1, 2, 7, 11, 1, 2, 3,
^ 6, 10, 0, 1, 2, 7, 11, 0, 1, 2,
^ 7, 11, 0, 1, 2, 7, 11, 1, 2, 3,
^ 3, 0, 3, 1, 3, 0, 3, 1, 0, 1,
^ 1, 2, 1, 2, 1, 2,
^ 2, 3, 2, 3, 2, 3, 1, 2, 1, 2,
^ 0, 1, 0, 1, 0,
^ 0, 1, 0, 1, 0, 1,
^ 0, 1, 0, 1, 0,
^ 0, 1, 0, 1, 0, 1,
^ 6, 10, 0, 1, 2, 7, 11, 0, 1, 2,
^ 7, 11, 0, 1, 2, 7, 11, 1, 2, 3,
^ 6, 10, 0, 1, 2, 7, 11, 0, 1, 2,
^ 7, 11, 0, 1, 2, 7, 11, 1, 2, 3,
^ 3, 3, 3, 1, 2, 3, 6, 10,
^ 1, 1, 1, 0, 1, 2, 4, 8,
^ 3, 3, 3, 1, 2, 3, 6, 10,
^ 1, 1, 1, 3, 2, 3, 6, 10, 1, -1]

// guardian: 190 bpm, 2444 frames
var map_guardian_times = [114, 119, 123, 133, 152, 171, 176, 180, 189,
^ 227, 232, 237, 256, 261, 265, 270, 284, 289, 294, 303, 322,
^ 341, 346, 351, 360, 379, 398, 403, 407, 426, 431, 436,
^ 455, 460, 464, 474, 483, 488, 493, 498,
^ 512, 517, 521, 531, 540, 545, 549, 559, 568, 573, 578, 587,
^ 597, 602, 606, 616, 625, 630, 635, 644, 654, 681,
^ 682, 710, 711, 738, 739, 766, 767, 795, 796, 823, 824, 857,
^ 858, 862, 867, 872, 877, 881, 886, 891, 896, 900, 905,
^ 914, 919, 924, 928, 933, 938, 943, 947, 952, 957, 962,
^ 971, 976, 981, 985, 990, 995, 1022,
^ 1023, 1051, 1052, 1079, 1080, 1107, 1108, 1136, 1137, 1164, 1165, 1193,
^ 1194, 1212, 1213, 1221, 1222, 1231, 1232, 1240,
^ 1241, 1268, 1269, 1278, 1279, 1287, 1288, 1297,
^ 1298, 1325, 1326, 1335, 1336, 1344, 1345, 1354,
^ 1355, 1382, 1383, 1392, 1393, 1401, 1402, 1411,
^ 1412, 1439, 1440, 1448, 1449, 1458, 1459, 1467,
^ 1468, 1496, 1497, 1505, 1506, 1515, 1516, 1524,
^ 1525, 1553, 1554, 1562, 1563, 1572, 1573, 1581,
^ 1582, 1610, 1611, 1619, 1620, 1628, 1629, 1638, 1639, 1733, 1734, 1761,
^ 1762, 1790, 1791, 1818, 1819, 1846, 1847, 1875, 1876, 1903, 1904, 1937,
^ 1938, 1942, 1947, 1952, 1957, 1961, 1966, 1971, 1976, 1980, 1985,
^ 1994, 1999, 2004, 2008, 2013, 2018, 2023, 2027, 2032, 2037, 2042,
^ 2051, 2056, 2061, 2065, 2070, 2075, 2102,
^ 2103, 2131, 2132, 2159, 2160, 2187, 2188, 2216, 2217, 2244, 2245, 2273,
^ 2274, 2279, 2331, 2336, 2387, 2392, 2444]

var map_guardian_notes = [0, 0, 2, 2, 3, 0, 0, 2, 2,
^ 0, 0, 2, 0, 1, 3, 2, 0, 0, 2, 2, 3,
^ 0, 0, 2, 2, 3, 0, 0, 2, 1, 0, 2,
^ 0, 0, 2, 2, 0, 1, 3, 2,
^ 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 2, 2,
^ 0, 0, 2, 2, 0, 0, 2, 2, 6, 10,
^ 7, 11, 6, 10, 5, 9, 4, 8, 6, 10, 7, 11,
^ 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1,
^ 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1,
^ 0, 2, 1, 2, 0, 7, 11,
^ 6, 10, 5, 9, 4, 8, 5, 9, 6, 10, 7, 11,
^ 4, 8, 5, 9, 6, 10, 7, 11,
^ 5, 9, 4, 8, 6, 10, 7, 11,
^ 5, 9, 4, 8, 7, 11, 6, 10,
^ 5, 9, 6, 10, 7, 11, 6, 10,
^ 4, 8, 5, 9, 6, 10, 7, 11,
^ 5, 9, 4, 8, 6, 10, 7, 11,
^ 5, 9, 4, 8, 7, 11, 6, 10,
^ 5, 9, 6, 10, 7, 11, 6, 10, 4, 8, 6, 10,
^ 7, 11, 6, 10, 5, 9, 4, 8, 6, 10, 7, 11,
^ 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1,
^ 0, 2, 1, 2, 0, 2, 1, 2, 0, 2, 1,
^ 0, 2, 1, 2, 0, 7, 11,
^ 6, 10, 5, 9, 4, 8, 5, 9, 6, 10, 7, 11,
^ 0, 0, 0, 0, 0, 0, -1]

// ridge: 188 bpm, 3217 frames
var map_icy_times = [0, 19, 38, 57, 67, 86, 105, 124,
^ 134, 153, 172, 191, 201, 220, 239, 259,
^ 268, 273, 278, 354, 373, 378, 383, 388, 393, 398,
^ 402, 407, 412, 488, 507, 512, 517, 527, 532,
^ 536, 541, 546, 622, 641, 646, 651, 656, 661, 666, 670, 675, 680, 756,
^ 804, 809, 814, 842, 843, 848, 852, 909, 910, 915, 919, 924, 929, 934,
^ 938, 943, 948, 976, 977, 982, 986, 1043, 1044, 1049, 1053, 1063, 1068,
^ 1072, 1077, 1082, 1110, 1111, 1116, 1120, 1177, 1178, 1183, 1187, 1192, 1197, 1202,
^ 1206, 1211, 1216, 1244, 1245, 1250, 1254, 1311, 1312, 1317, 1321, 1326, 1331, 1336,
^  1340, 1350, 1360, 1369, 1379, 1388, 1398, 1407, 1465,
^ 1484, 1494, 1503, 1513, 1522, 1532, 1541, 1599,
^ 1618, 1628, 1637, 1647, 1656, 1666, 1676, 1733,
^ 1752, 1762, 1771, 1781, 1790, 1800, 1810, 1828, 1829, 1847, 1848, 1853, 1863,
^ 1886, 1896, 1905, 1915, 1924, 1934, 1944, 2001,
^ 2020, 2030, 2039, 2049, 2059, 2068, 2078, 2135,
^ 2154, 2164, 2173, 2183, 2193, 2202, 2207, 2212, 2269,
^ 2288, 2298, 2307, 2317, 2327, 2336, 2346, 2364, 2365, 2383, 2384, 2389, 2399,
^ 2413, 2418, 2422, 2450, 2451, 2456, 2461, 2470, 2480, 2517,
^ 2518, 2523, 2528, 2533, 2537, 2542,
^ 2547, 2552, 2556, 2584, 2585, 2590, 2595, 2604, 2614, 2651,
^ 2652, 2657, 2662, 2671, 2676,
^ 2681, 2686, 2690, 2718, 2719, 2724, 2729, 2738, 2743, 2748, 2785,
^ 2786, 2791, 2796, 2801, 2805, 2810,
^ 2815, 2820, 2824, 2852, 2853, 2858, 2863, 2872, 2882, 2920,
^ 2949, 2968, 2987, 3006, 3016, 3035, 3054, 3073,
^ 3083, 3102, 3121, 3140, 3150, 3169, 3188, 3207, 3217]

var map_icy_notes = [0, 3, 2, 1, 0, 3, 2, 1,
^ 0, 3, 2, 1, 0, 3, 2, 1,
^ 3, 2, 7, 11, 2, 0, 1, 0, 1, 2,
^ 3, 2, 7, 11, 2, 3, 1, 1, 2,
^ 3, 2, 7, 11, 2, 0, 1, 0, 1, 2, 3, 2, 7, 11,
^ 3, 2, 7, 11, 1, 0, 5, 9, 2, 0, 1, 0, 1, 2,
^ 3, 2, 7, 11, 1, 0, 5, 9, 2, 3, 1, 1, 2,
^ 3, 2, 7, 11, 1, 0, 5, 9, 2, 0, 1, 0, 1, 2,
^ 3, 2, 7, 11, 1, 2, 5, 9, 3, 2, 1, 0, 2, 1,
^ 0, 0, 1, 2, 0, 1, 2, 5, 9,
^ 1, 3, 2, 1, 0, 1, 4, 8,
^ 0, 1, 2, 0, 1, 3, 5, 9,
^ 1, 3, 2, 1, 0, 1, 6, 10, 5, 9, 2, 1, 0,
^ 0, 1, 2, 0, 1, 2, 5, 9,
^ 1, 3, 2, 1, 0, 1, 4, 8,
^ 0, 1, 2, 0, 1, 3, 2, 5, 9,
^ 1, 3, 2, 1, 0, 1, 6, 10, 5, 9, 2, 1, 0,
^ 3, 2, 7, 11, 1, 0, 1, 3, 5, 9, 2, 0, 1, 0, 1, 2,
^ 3, 2, 7, 11, 2, 1, 0, 2, 5, 9, 2, 3, 1, 1, 2,
^ 3, 2, 7, 11, 1, 0, 1, 1, 0, 5, 9, 2, 0, 1, 0, 1, 2,
^ 3, 2, 7, 11, 2, 1, 0, 3, 5, 9,
^ 0, 3, 2, 1, 0, 3, 2, 1,
^ 0, 3, 2, 1, 0, 3, 2, 1, -1]

// hrimnir: 220 bpm, 2185 frames
var map_hrimnir_times = [0, 8, 33, 45, 57, 65, 90, 102,
^ 115, 123, 147, 159, 172, 180, 205, 217,
^ 229, 237, 245, 262, 274, 286, 295, 303, 319, 331,
^ 344, 352, 360, 376, 389,
^ 401, 405, 409, 413, 417, 434, 438, 442,
^ 458, 462, 466, 475, 483, 487, 491, 495, 499,
^ 507, 511, 515, 519, 524, 540, 544, 548, 552, 556,
^ 565, 569, 573, 577, 581, 589, 597, 601, 605, 609, 614, 622,
^ 630, 634, 638, 642, 646, 663, 667, 671,
^ 687, 691, 695, 704, 712, 716, 720, 724, 728,
^ 736, 740, 745, 749, 753, 769, 773,
^ 777, 794, 810, 826, 835, 851, 867,
^  892, 904, 908, 916, 920, 925, 929, 933, 941, 945,
^ 949, 961, 965, 974, 978, 982, 986, 990, 998, 1002,
^ 1006, 1019, 1023, 1031, 1035, 1039, 1043, 1047, 1055, 1059,
^ 1064, 1076, 1080, 1088, 1096, 1100, 1105, 1109, 1113,
^ 1121, 1133, 1137, 1145, 1149, 1154, 1158, 1162, 1170, 1174,
^ 1178, 1190, 1195, 1203, 1207, 1211, 1215, 1219, 1227, 1231,
^ 1235, 1248, 1252, 1260, 1264, 1268, 1272, 1276,
^ 1383, 1395, 1399, 1411, 1415, 1424, 1432, 1489,
^ 1497, 1509, 1514, 1526, 1530, 1538, 1604,
^ 1612, 1624, 1628, 1640, 1645, 1653, 1669, 1681, 1685, 1698, 1702, 1710,
^ 1726, 1739, 1743, 1755, 1759, 1767, 1833,
^ 1841, 1853, 1857, 1869, 1874, 1882, 1890, 1947,
^ 1955, 1968, 1972, 1984, 1988, 1996,
^ 2013, 2025, 2029, 2041, 2045, 2054,
^ 2070, 2082, 2086, 2099, 2103, 2107, 2111, 2115, 2172, 2185]

var map_hrimnir_notes = [2, 2, 2, 1, 2, 2, 2, 1,
^ 2, 2, 2, 1, 2, 2, 2, 1,
^ 0, 0, 3, 2, 1, 0, 0, 3, 2, 1,
^ 0, 0, 3, 2, 1,
^ 0, 1, 1, 0, 1, 3, 2, 1,
^ 3, 2, 1, 1, 0, 1, 3, 2, 1,
^ 0, 1, 1, 0, 1, 1, 2, 3, 2, 1,
^ 3, 2, 3, 2, 1, 1, 0, 1, 3, 2, 1, 3,
^ 0, 1, 1, 0, 1, 3, 2, 1,
^ 3, 2, 1, 1, 0, 1, 3, 2, 1,
^ 0, 1, 1, 0, 1, 1, 2,
^ 0, 3, 2, 1, 0, 3, 2,
^ 2, 1, 2, 3, 2, 3, 2, 1, 1, 0,
^ 1, 0, 1, 2, 1, 2, 1, 0, 0, 1,
^ 2, 1, 2, 3, 2, 3, 2, 1, 1, 0,
^ 1, 0, 1, 2, 2, 3, 2, 1, 0,
^ 2, 1, 2, 3, 2, 3, 2, 1, 1, 0,
^ 1, 0, 1, 2, 1, 2, 1, 0, 0, 1,
^ 2, 1, 2, 3, 2, 3, 2, 1,
^ 0, 1, 2, 1, 2, 3, 6, 10,
^ 3, 2, 1, 2, 1, 4, 8,
^ 3, 2, 1, 2, 1, 0, 3, 2, 1, 2, 1, 3,
^ 2, 3, 2, 3, 1, 4, 8,
^ 0, 1, 2, 1, 2, 3, 6, 10,
^ 3, 2, 1, 0, 3, 1,
^ 3, 2, 1, 2, 1, 0,
^ 0, 1, 2, 1, 1, 2, 3, 6, 10, -1]

// temple: 163 bpm, 2209 frames
var map_temple_times = [0, 6, 11, 17, 22, 28, 33, 39, 44, 50,
^ 55, 61, 66, 72, 77, 83, 88, 94, 99, 105,
^ 110, 116, 121, 127, 133, 139, 144, 150, 155, 161,
^ 166, 172, 177, 183, 188, 194, 199, 205, 210, 216,
^ 221, 227, 232, 238, 243, 249, 254, 260, 265, 271,
^ 276, 282, 287, 293, 298, 304, 309, 315, 320, 326,
^ 331, 337, 342, 348, 353, 359, 364, 370, 375, 381,
^ 387, 393, 398, 404, 409, 415, 420, 426, 431, 441,
^ 442, 519, 530, 536, 541, 547, 552, 562, 563, 569, 574, 629, 640, 646, 652, 662,
^ 663, 740, 751, 757, 762, 768, 773, 783, 784, 790, 795, 882,
^ 883, 894, 912, 917, 923, 928, 934,
^ 939, 945, 950, 956, 961, 967, 972, 978, 983, 989,
^ 994, 1005, 1022, 1027, 1033, 1038, 1044,
^ 1049, 1055, 1060, 1066, 1071, 1077, 1082, 1088, 1093, 1103,
^ 1104, 1115, 1132, 1137, 1143, 1148, 1154,
^ 1160, 1166, 1171, 1177, 1182, 1188, 1193, 1199, 1204, 1210,
^ 1215, 1226, 1243, 1248, 1254, 1259, 1265,
^ 1270, 1276, 1281, 1287, 1292, 1298, 1303, 1309, 1314, 1320,
^ 1325, 1357, 1358, 1390, 1391, 1407, 1408, 1413, 1419, 1425, 1431,
^ 1436, 1442, 1447, 1453, 1458, 1464, 1469, 1475, 1480, 1486,
^ 1491, 1497, 1502, 1508, 1513, 1519, 1524, 1530, 1535, 1541,
^ 1546, 1578, 1579, 1611, 1612, 1628, 1629, 1634, 1640, 1645, 1651,
^ 1656, 1662, 1667, 1673, 1679, 1685, 1690, 1696, 1701, 1707,
^ 1712, 1718, 1723, 1729, 1734, 1740, 1745, 1751, 1756, 1762,
^ 1767, 1799, 1800, 1832, 1833, 1849, 1850, 1855, 1861, 1866, 1872,
^ 1877, 1883, 1888, 1894, 1899, 1905, 1910, 1916, 1921, 1927,
^ 1933, 1939, 1944, 1950, 1955, 1961, 1966, 1972, 1977, 1983,
^ 1988, 2020, 2021, 2053, 2054, 2175, 2209]

var map_temple_notes = [0, 1, 3, 2, 1, 0, 1, 2, 1, 2,
^ 1, 3, 0, 1, 2, 1, 0, 3, 2, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2, 1, 2,
^ 1, 3, 0, 1, 3, 2, 1, 2, 1, 0,
^ 0, 1, 3, 2, 1, 0, 1, 2, 1, 2,
^ 1, 3, 0, 1, 2, 1, 0, 3, 2, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2, 1, 2,
^ 3, 2, 0, 1, 3, 2, 3, 1, 6, 10,
^ 4, 8, 0, 1, 2, 1, 7, 11, 2, 1, 4, 8, 3, 1, 6, 10,
^ 4, 8, 0, 1, 2, 1, 7, 11, 1, 2, 7, 11,
^ 0, 3, 2, 0, 1, 2, 3,
^ 2, 3, 0, 1, 2, 1, 0, 3, 2, 1,
^ 0, 3, 2, 0, 1, 2, 3,
^ 1, 3, 0, 1, 2, 1, 3, 1, 6, 10,
^ 0, 3, 2, 0, 1, 2, 3,
^ 2, 3, 0, 1, 2, 1, 0, 3, 2, 1,
^ 0, 3, 2, 0, 1, 2, 3,
^ 2, 3, 0, 1, 2, 1, 0, 3, 2, 1,
^ 4, 8, 7, 11, 5, 9, 3, 2, 1, 2, 1,
^ 2, 1, 0, 3, 2, 1, 2, 1, 0, 3,
^ 2, 1, 2, 1, 0, 3, 2, 1, 2, 1,
^ 6, 10, 7, 11, 5, 9, 3, 2, 1, 2, 1,
^ 2, 1, 0, 3, 2, 1, 2, 1, 0, 3,
^ 2, 1, 2, 1, 0, 3, 2, 1, 2, 1,
^ 4, 8, 7, 11, 5, 9, 3, 2, 1, 2, 1,
^ 2, 1, 0, 3, 2, 1, 2, 1, 0, 3,
^ 2, 1, 2, 1, 0, 3, 2, 1, 2, 1,
^ 7, 11, 6, 10, 4, 8, -1]

// nagaraja: 142 bpm, 3245 frames
var map_nagaraja_times = [0, 6, 25, 31, 51, 57, 76, 82,
^ 101, 107, 127, 133, 152, 158, 177, 183,
^ 203, 209, 215, 221, 228, 234, 241, 247,
^ 254, 260, 266, 272, 279, 285, 292, 298,
^ 304, 310, 317, 323, 330, 336, 342, 348,
^ 355, 361, 368, 374, 380, 386, 393, 399,
^ 406, 412, 431, 437, 456, 462, 482, 488,
^ 507, 513, 532, 538, 558, 564, 583, 589,
^ 608, 614, 621, 627, 634, 640, 646, 652,
^ 659, 665, 672, 678, 685, 691, 697, 703,
^ 710, 716, 723, 729, 735, 741, 748, 754,
^ 761, 767, 773, 779, 786, 792, 799, 805,
^ 811, 817, 837, 843, 862, 868, 887, 893,
^ 913, 919, 938, 944, 963, 969, 989, 995,
^ 1014, 1020, 1027, 1033, 1039, 1045, 1052, 1058,
^ 1065, 1071, 1077, 1083, 1090, 1096, 1103, 1109,
^ 1115, 1121, 1128, 1134, 1141, 1147, 1154, 1160,
^ 1166, 1172, 1179, 1185, 1192, 1198, 1204, 1210,
^ 1217, 1223, 1242, 1248, 1268, 1274, 1293, 1299,
^ 1318, 1324, 1344, 1350, 1369, 1375, 1394, 1400,
^ 1420, 1426, 1432, 1438, 1445, 1451, 1458, 1464,
^ 1470, 1476, 1483, 1489, 1496, 1502, 1508, 1514,
^ 1521, 1527, 1534, 1540, 1546, 1552, 1559, 1565,
^ 1572, 1578, 1585, 1591, 1597, 1603, 1610, 1616,
^ 1623, 1647, 1648, 1672, 1673, 1698, 1699, 1717,
^ 1724, 1748, 1749, 1774, 1775, 1813,
^ 1825, 1838, 1844, 1857, 1860,
^ 1927, 1936, 1942, 1945, 1948, 1952, 1955, 1965, 1968, 1974, 1977, 1986, 2003,
^ 2028, 2053, 2054, 2078, 2079, 2103, 2104, 2123,
^ 2130, 2154, 2155, 2179, 2180, 2218,
^ 2231, 2244, 2250, 2262, 2265, 2269, 2275, 2332, 2345, 2358, 2364, 2396, 2408,
^ 2434, 2453, 2459, 2484, 2485, 2509, 2510, 2529,
^ 2535, 2560, 2561, 2585, 2586, 2624,
^ 2637, 2662, 2675, 2700, 2713, 2738, 2763, 2776, 2801, 2804, 2807, 2810, 2820,
^ 2839, 2864, 2865, 2889, 2890, 2914, 2915, 2934,
^ 2941, 2965, 2966, 2991, 2992, 3030, 3245]

var map_nagaraja_notes = [0, 0, 0, 0, 0, 0, 0, 0,
^ 0, 0, 0, 0, 0, 0, 0, 0,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 0, 0, 0, 0, 0, 0, 0, 0,
^ 0, 0, 0, 0, 0, 0, 0, 0,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 2, 1, 2, 1, 2, 1, 2, 1,
^ 2, 1, 2, 1, 2, 1, 3, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 2, 1, 2, 1, 2, 1, 2, 1,
^ 2, 1, 2, 1, 2, 1, 3, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 0, 1, 3, 2, 1, 0, 1, 2,
^ 1, 2, 1, 3, 0, 1, 2, 1,
^ 4, 8, 6, 10, 7, 11, 6, 10,
^ 4, 8, 6, 10, 5, 9,
^ 0, 2, 3, 2, 3,
^ 0, 1, 2, 1, 0, 1, 2, 3, 1, 3, 1, 2, 1,
^ 4, 8, 6, 10, 7, 11, 6, 10,
^ 7, 11, 5, 9, 6, 10,
^ 1, 1, 3, 3, 2, 1, 1, 0, 0, 1, 2, 1, 2,
^ 6, 10, 6, 10, 7, 11, 6, 10,
^ 5, 9, 6, 10, 5, 9,
^ 3, 3, 3, 1, 1, 2, 2, 2, 2, 1, 0, 0, 0,
^ 7, 11, 6, 10, 5, 9, 4, 8,
^ 7, 11, 6, 10, 7, 11, -1]

// dysangelos: 187/179/185 bpm, 5268 frames
var map_dysan_times = [0, 10, 24, 34, 44, 53, 58, 63,
^ 67, 72, 77, 82, 92, 96, 101, 106, 111, 116, 121, 125, 130,
^ 135, 144, 159, 169, 178, 188, 193, 198,
^ 202, 207, 212, 217, 226, 231, 236, 241, 246, 250, 255, 260, 265,
^ 270, 275, 279, 284, 289, 294, 298, 303, 308, 313, 318, 327, 332,
^ 337, 342, 347, 352, 356, 361, 366, 371, 375, 380, 385, 390, 395, 400,
^ 404, 409, 414, 419, 424, 429, 433, 438, 443, 448, 452, 462, 467,
^ 472, 477, 481, 486, 491, 496, 501, 506, 510, 515, 520, 525, 529, 534,
^  539, 544, 549, 554, 558, 563, 568, 573, 578, 583, 587, 592, 597, 602,
^ 606, 611, 616, 621, 626, 631, 635, 640, 645, 650, 655, 660, 664, 669,
^ 674, 679, 683, 688, 693, 698, 703, 708, 712, 717, 722, 727, 732, 737,
^ 741, 755, 756, 769, 770, 784, 785, 799,
^ 823, 828, 832, 837, 842, 847, 852, 857, 862, 866, 871,
^ 876, 886, 895, 900, 905, 910, 914, 919, 924, 929, 934, 939,
^ 943, 948, 953, 958, 963, 968, 972, 977, 982, 987, 991, 996,
^ 1001, 1015, 1016, 1029, 1030, 1044, 1045, 1067,
^ 1068, 1073, 1078, 1083, 1088, 1093, 1097, 1102, 1107, 1112, 1117, 1126, 1131,
^ 1136, 1141, 1145, 1150, 1155, 1160, 1165, 1170, 1174, 1179, 1184, 1189, 1194, 1199,
^ 1203, 1208, 1213, 1218, 1222, 1227, 1232, 1237, 1242, 1247, 1251, 1261, 1266,
^ 1271, 1276, 1280, 1285, 1290, 1295, 1299, 1304, 1309, 1314, 1319, 1324, 1328, 1333,
^ 1338, 1343, 1348, 1353, 1357, 1362, 1367, 1391,
^ 1396, 1401, 1405, 1410, 1415, 1420, 1425, 1430, 1434, 1439, 1444, 1449,
^ 1453, 1467, 1468, 1473, 1478, 1482, 1496, 1497, 1502, 1507,
^ 1511, 1525, 1526, 1530, 1535, 1540, 1554, 1555, 1559, 1564,
^ 1569, 1574, 1579, 1584, 1588, 1593, 1598, 1617, 1622,
^ 1627, 1632, 1636, 1641, 1646, 1651, 1656, 1669, 1670, 1675, 1680,
^ 1684, 1698, 1699, 1704, 1709, 1713, 1727, 1728, 1733, 1738,
^ 1742, 1756, 1757, 1761, 1766, 1771, 1776, 1781, 1786, 1790, 1795,
^ 1800, 1814, 1815, 1847, 1848, 1857, 1858, 1866,
^ 1867, 1881, 1882, 1915, 1916, 1924, 1925, 1934,
^ 1935, 1948, 1949, 1982, 1983, 1992, 1993, 2001,
^ 2002, 2016, 2017, 2045, 2050, 2059, 2060, 2069,
^ 2070, 2095, 2100, 2120, 2125, 2128,
^ 2130, 2139, 2140, 2149, 2150, 2160, 2161, 2170, 2171, 2180, 2181, 2186,
^ 2191, 2205, 2206, 2220, 2221, 2241, 2246, 2249,
^ 2251, 2260, 2261, 2270, 2271, 2280, 2281, 2306,
^ 2311, 2331, 2336, 2339, 2342, 2351, 2352, 2361, 2362, 2371,
^ 2372, 2381, 2382, 2391, 2392, 2401, 2402, 2411, 2412, 2421, 2422, 2427,
^ 2432, 2441, 2442, 2451, 2452, 2461, 2462, 2471, 2472, 2481, 2482, 2487,
^ 2492, 2501, 2502, 2511, 2512, 2517, 2523, 2532, 2533, 2542, 2543, 2548,
^ 2553, 2577, 2582, 2602, 2607, 2609,
^ 2611, 2620, 2621, 2630, 2631, 2640, 2641, 2649, 2650, 2659, 2660, 2665,
^ 2670, 2683, 2684, 2698, 2699, 2718, 2723, 2725,
^ 2728, 2737, 2738, 2747, 2748, 2756, 2757, 2782,
^ 2787, 2806, 2811, 2813, 2816, 2824, 2825, 2834, 2835, 2844,
^ 2845, 2854, 2855, 2863, 2864, 2873, 2874, 2883, 2884, 2893, 2894, 2899,
^ 2903, 2912, 2913, 2922, 2923, 2931, 2932, 2941, 2942, 2951, 2952, 2957,
^ 2962, 2967, 2976, 2991, 3001, 3010,
^ 3020, 3025, 3030, 3035, 3039, 3044, 3049, 3054, 3059, 3064, 3069, 3074,
^ 3078, 3083, 3088, 3093, 3098, 3103, 3108, 3113, 3117, 3122, 3127, 3132,
^ 3137, 3142, 3147, 3152, 3156, 3161, 3166, 3171, 3176, 3181, 3185, 3190,
^ 3195, 3200, 3205, 3210, 3215, 3220, 3224, 3229, 3234, 3239, 3244, 3249,
^ 3254, 3259, 3263, 3268, 3273, 3278, 3283, 3288, 3292, 3297, 3302, 3307,
^ 3312, 3317, 3322, 3327, 3331, 3336, 3341, 3346, 3351, 3356, 3361, 3366,
^ 3370, 3375, 3380, 3385, 3390, 3395, 3399, 3404, 3409, 3414, 3419, 3424,
^ 3429, 3434, 3438, 3443, 3448, 3453, 3458, 3463, 3468, 3473, 3477, 3482, 3487,
^ 3545, 3574, 3575, 3598, 3599, 3601,
^ 3604, 3613, 3614, 3622, 3623, 3632, 3633, 3642, 3643, 3651, 3652, 3661,
^ 3662, 3701, 3711, 3716,
^ 3721, 3726, 3730, 3735, 3740, 3745, 3750, 3755, 3759, 3764, 3769, 3774,
^ 3779, 3807, 3808, 3832, 3833, 3835,
^ 3837, 3846, 3847, 3856, 3857, 3866, 3867, 3875, 3876, 3885, 3886, 3895,
^ 3896, 3924, 3925, 3953, 3954, 3982, 3983, 4011,
^ 4012, 4041, 4042, 4061, 4066, 4068,
^ 4071, 4080, 4081, 4089, 4090, 4099, 4100, 4109, 4110, 4118, 4119, 4128,
^ 4129, 4168, 4178, 4183,
^ 4188, 4193, 4197, 4202, 4207, 4212, 4217, 4222, 4227, 4232, 4236, 4241,
^ 4246, 4274, 4275, 4295, 4300, 4302,
^ 4304, 4313, 4314, 4323, 4324, 4333, 4334, 4342, 4343, 4352, 4353, 4362,
^ 4363, 4420, 4421, 4449, 4450, 4478,
^ 4479, 4484, 4489, 4494, 4499, 4504, 4509, 4514, 4518,
^ 4528, 4533, 4538, 4543, 4548, 4553, 4557, 4563, 4567,
^ 4577, 4582, 4587, 4592, 4596, 4601, 4606, 4611, 4616, 4621,
^ 4625, 4630, 4635, 4640, 4645, 4650, 4655, 4660, 4664, 4669,
^ 4674, 4679, 4684, 4689, 4694, 4699, 4703, 4708, 4713, 4718,
^ 4723, 4728, 4732, 4737, 4742, 4747, 4752, 4757, 4762, 4767,
^ 4771, 4776, 4781, 4786, 4791, 4796, 4801, 4806, 4810, 4815,
^ 4820, 4825, 4830, 4835, 4839, 4844, 4849, 4854, 4859, 4864,
^ 4869, 4874, 4878, 4883, 4888, 4893, 4898, 4903, 4908, 4913,
^ 4917, 4922, 4927, 4932, 4937, 4942, 4947, 4952, 4956, 4961,
^ 4966, 4995, 5000, 5005, 5010,
^ 5015, 5020, 5024, 5029, 5034, 5039, 5044, 5049, 5054, 5059,
^ 5063, 5068, 5073, 5078, 5083, 5088, 5092, 5097, 5102, 5107,
^ 5112, 5117, 5122, 5127, 5131, 5136, 5141, 5146, 5151, 5156,
^ 5161, 5175, 5190, 5219, 5234, 5248, 5263,
^ 5277, 5292, 5307, 5336, 5350, 5365, 5380,
^ 5394, 5409, 5423, 5452, 5467, 5482, 5496,
^ 5511, 5526, 5540, 5569, 5598, 5627]

var map_dysan_notes = [1, 1, 1, 1, 1, 1, 3, 2,
^ 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 1, 0,
^ 1, 1, 1, 1, 1, 1, 3, 2,
^ 0, 1, 0, 1, 0, 1, 2, 3, 2, 3, 2, 1, 0,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 2, 3, 2,
^ 0, 1, 0, 1, 2, 0, 1, 2, 3, 2, 3, 2, 1, 0,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 2, 3, 2,
^ 0, 1, 0, 1, 2, 0, 1, 2, 3, 2, 3, 2, 1, 0,
^ 0, 1, 0, 1, 2, 0, 2, 3, 2, 1, 0, 2, 0, 2,
^ 0, 1, 2, 3, 1, 2, 3, 1, 2, 3, 0, 1, 3, 1,
^ 3, 2, 1, 2, 3, 0, 1, 2, 1, 0, 1, 2, 1, 2,
^ 7, 11, 6, 10, 5, 9, 4, 8,
^ 1, 2, 0, 1, 3, 1, 0, 3, 0, 3, 2,
^ 3, 2, 1, 2, 0, 1, 0, 3, 0, 2, 3, 2,
^ 1, 0, 3, 2, 1, 0, 3, 2, 1, 0, 1, 2,
^ 4, 8, 5, 9, 6, 10, 7, 11,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 2, 3, 2,
^ 0, 1, 0, 1, 2, 0, 1, 2, 3, 2, 3, 2, 1, 0,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 2, 3, 2,
^ 0, 1, 0, 1, 2, 0, 1, 2, 3, 2, 3, 2, 1, 0,
^ 0, 1, 2, 3, 0, 3, 6, 10,
^ 2, 3, 0, 1, 2, 1, 2, 3, 1, 2, 0, 1,
^ 4, 8, 1, 2, 0, 7, 11, 2, 1, 0,
^ 5, 9, 2, 1, 0, 6, 10, 3, 2, 3,
^ 0, 1, 2, 3, 0, 3, 6, 10, 1,
^ 0, 1, 2, 0, 1, 2, 7, 11, 2, 1, 2,
^ 4, 8, 1, 2, 0, 7, 11, 2, 1, 0,
^ 5, 9, 3, 0, 1, 0, 2, 1, 0, 1, 2,
^ 7, 11, 5, 9, 4, 8, 7, 11,
^ 6, 10, 5, 9, 7, 11, 5, 9,
^ 6, 10, 4, 8, 5, 9, 7, 11,
^ 6, 10, 5, 9, 4, 8, 6, 10,
^ 5, 9, 5, 9, 1, 2,
^ 7, 11, 6, 10, 4, 8, 7, 11, 6, 10, 4, 8,
^ 5, 9, 7, 11, 5, 9, 2, 3,
^ 5, 9, 6, 10, 7, 11, 6, 10,
^ 4, 8, 0, 1, 4, 8, 5, 9, 6, 10,
^ 7, 11, 6, 10, 5, 9, 4, 8, 5, 9, 4, 8,
^ 7, 11, 6, 10, 5, 9, 4, 8, 5, 9, 4, 8,
^ 6, 10, 7, 11, 6, 10, 5, 9, 6, 10, 7, 11,
^ 5, 9, 5, 9, 1, 2,
^ 7, 11, 6, 10, 4, 8, 7, 11, 6, 10, 4, 8,
^ 5, 9, 7, 11, 5, 9, 2, 3,
^ 5, 9, 6, 10, 7, 11, 6, 10,
^ 4, 8, 0, 1, 4, 8, 5, 9, 6, 10,
^ 7, 11, 6, 10, 5, 9, 4, 8, 5, 9, 4, 8,
^ 7, 11, 6, 10, 5, 9, 4, 8, 5, 9, 4, 8,
^ 3, 3, 3, 3, 3, 3,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 3, 2,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 3, 2,
^ 0, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1,
^ 0, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 3, 2,
^ 1, 2, 1, 2, 3, 1, 2, 1, 2, 1, 3, 2,
^ 0, 1, 0, 1, 2, 0, 1, 0, 1, 0, 2, 1,
^ 0, 1, 0, 1, 2, 0, 1, 0, 3, 2, 1, 0, 1,
^ 7, 11, 4, 8, 1, 2,
^ 7, 11, 6, 10, 5, 9, 6, 10, 5, 9, 4, 8,
^ 5, 9, 0, 1,
^ 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1,
^ 7, 11, 5, 9, 2, 3,
^ 4, 8, 5, 9, 6, 10, 5, 9, 4, 8, 7, 11,
^ 5, 9, 7, 11, 4, 8, 6, 10,
^ 7, 11, 4, 8, 1, 2,
^ 7, 11, 6, 10, 5, 9, 6, 10, 5, 9, 4, 8,
^ 5, 9, 0, 1,
^ 2, 3, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1,
^ 7, 11, 5, 9, 2, 3,
^ 4, 8, 5, 9, 6, 10, 5, 9, 4, 8, 7, 11,
^ 5, 9, 6, 10, 7, 11,
^ 1, 2, 1, 2, 3, 1, 2, 1, 3,
^ 1, 2, 1, 2, 3, 1, 2, 1, 3,
^ 0, 1, 0, 1, 2, 0, 1, 0, 2, 1,
^ 0, 1, 0, 1, 2, 0, 1, 0, 2, 1,
^ 1, 2, 1, 2, 3, 1, 2, 1, 3, 2,
^ 1, 2, 1, 2, 3, 1, 2, 1, 3, 2,
^ 1, 2, 1, 2, 3, 1, 2, 1, 3, 2,
^ 0, 1, 0, 1, 2, 0, 1, 0, 1, 2,
^ 0, 1, 2, 3, 0, 1, 0, 1, 2, 3,
^ 2, 3, 2, 2, 1, 0, 3, 2, 1, 0,
^ 1, 0, 1, 2, 3,
^ 1, 2, 3, 2, 1, 0, 3, 2, 1, 0,
^ 0, 1, 0, 1, 0, 1, 0, 1, 2, 3,
^ 2, 3, 2, 2, 1, 0, 3, 2, 1, 0,
^ 2, 1, 0, 0, 1, 1, 2,
^ 3, 2, 1, 1, 2, 3, 2,
^ 1, 0, 3, 0, 1, 2, 3,
^ 2, 1, 0, 0, 0, -1]

var songs = ["deadwood_3", "tree_boss", "caustic_caves",
^ "spider_boss", "fungus_forest_3", "mushroom_boss",
^ "undead_crypt_3", "skeleton_boss", "bronze_mine_3",
^ "bronze_guardian_3", "icy_ridge_3", "yeti",
^ "temple_3", "nagaraja", "rocky_plateau_fight"]

var song_names = ["Deadwood Canyon", "Xyloalgia", "Caves of Fear",
^ "Bolesh", "Mushroom Forest", "Angry Shroom",
^ "Haunted Halls", "Pallas", "Boiling Mine",
^ "Bronze Guardian", "Icy Ridge", "Hrímnir",
^ "Temple", "Nagaraja", "Dysangelos"]

var all_maps_times = [map_deadwood_times, map_xylo_times, map_caves_times,
^ map_bolesh_times, map_mushroom_times, map_angry_times,
^ map_halls_times, map_pallas_times, map_mine_times,
^ map_guardian_times, map_icy_times, map_hrimnir_times,
^ map_temple_times, map_nagaraja_times, map_dysan_times]

var all_maps_notes = [map_deadwood_notes, map_xylo_notes, map_caves_notes,
^ map_bolesh_notes, map_mushroom_notes, map_angry_notes,
^ map_halls_notes, map_pallas_notes, map_mine_notes,
^ map_guardian_notes, map_icy_notes, map_hrimnir_notes,
^ map_temple_notes, map_nagaraja_notes, map_dysan_notes]

var maps_tempos = [145.0, 193.0, 112.0, 171.0, 140.0, 172.5,
^ 132.0, 156.0, 154.0, 190.0, 188.0, 220.0, 163.0, 142.0, 187.0]

var score_save_keys = ["RTHM_DEADWOOD_SCORE", "RTHM_XYLO_SCORE", "RTHM_CAVES_SCORE",
^ "RTHM_BOLESH_SCORE", "RTHM_MUSHROOM_SCORE", "RTHM_ANGRY_SCORE",
^ "RTHM_HALLS_SCORE", "RTHM_PALLAS_SCORE", "RTHM_MINE_SCORE",
^ "RTHM_GUARDIAN_SCORE", "RTHM_ICY_SCORE", "RTHM_HRIMNIR_SCORE",
^ "RTHM_TEMPLE_SCORE", "RTHM_NAGARAJA_SCORE", "RTHM_DYSAN_SCORE"]

var combo_save_keys = ["RTHM_DEADWOOD_COMBO", "RTHM_XYLO_COMBO", "RTHM_CAVES_COMBO",
^ "RTHM_BOLESH_COMBO", "RTHM_MUSHROOM_COMBO", "RTHM_ANGRY_COMBO",
^ "RTHM_HALLS_COMBO", "RTHM_PALLAS_COMBO", "RTHM_MINE_COMBO",
^ "RTHM_GUARDIAN_COMBO", "RTHM_ICY_COMBO", "RTHM_HRIMNIR_COMBO",
^ "RTHM_TEMPLE_COMBO", "RTHM_NAGARAJA_COMBO", "RTHM_DYSAN_COMBO"]

var map_scores = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
var map_fc = [true, true, true, true, true, true, true, true,
^ true, true, true, true, true, true, true]

var note_start_distance = 22
var line_y = 8
var note_display_beats = 4.0
var line_style = ui.AddStyle("═════════")
var hold_style = ui.AddStyle("¡#¡║█║!#!")

var menuUIPanel
var titleSprite
var menuBallSprite
var songNameTxt
var prevSongBtn
var nextSongBtn
var highScoreTxt
var fcTxt
var playBtn
var gameQuitBtn
var bindingsBtn
var bindingsLabel
var sfxBtn
var sfxLabel
var testBtn
var gameResultsPanel
var resultsTitleTxt
var resultsLabels
var resultsScoreTxt
var resultsRankTxt
var resultsFCTxt
var perfectsTxt
var goodsTxt
var oksTxt
var missesTxt

var songUIPanel
var evalLine
var scoreTxt
var comboTxt
var laneBtns = []
var laneCanvs = []
var keyText = []
var tempoText
var songQuitBtn
var songBallSprite

var testUIPanel
var offsetLabel
var lineLabel
var offsetTxt
var incrBtn
var decrBtn
var songOffsetLabel
var songOffsetTxt
var songIncrBtn
var songDecrBtn

var mapIndex = 0
var setBindings = 0
var binds = [["←", "↓", "↑", "→"],["D", "F", "J", "K"],["H", "J", "K", "L"]]
var lastInputLane = -1
var inputLane = -1
var songTip = "TIP: If the song or notes seem out of sync, you can try\nadjusting options in the Test Play menu."
var songTipTimer = 0
var doSFX = false
var menuTime = 0
var menuOn = false
var titleX = -70.0
var menuBallY = -30.0
var songBallY = 0.0
var laneWidth
var startTime = 0
var stopTime = 0
var frameOffset = 0
var songStartOffset = 0
var queueTime = 0
var currentMap = ""
var mapIndex = 0
var currentScore = 0
var combo = 0
var misses = 0
var oks = 0
var goods = 0
var perfects = 0
var lastRunFC = false
var comboColor = #rainFF
var scorePerNote = 0
var isPlaying = false
var isTesting = false
var tempo
var lastTempo
var tempoChanges = []
var tempoChangeTimer = 0
var tempoChangeTime = 0
var tempoChangeText = ""
var tempoChangeColor = #9FFFFF
var beatsElapsed = 0
var beatTimeColor = #white

var noteQueue = []
var messageQueue = []
var holdNoteObjects = []
var noteOnByLane = [false, false, false, false]

func SlideTowardX(sprite, curX, tgtX, t)
  ?sprite.x ! tgtX
    curX = math.Lerp(curX, tgtX, t)
    sprite.x = math.RoundToInt(curX)
  :
    curX = tgtX
  return curX

func SlideTowardY(sprite, curY, tgtY, t)
  ?sprite.y ! tgtY
    curY = math.Lerp(curY, tgtY, t)
    sprite.y = math.RoundToInt(curY)
  :
    curY = tgtY
  return curY

func MoveTowardX(sprite, tgtX)
  ?sprite.x ! tgtX
    sprite.x = sprite.x + math.Sign(tgtX - sprite.x)

func AnimateTitle()
  menuBallY = SlideTowardY(menuBallSprite, menuBallY, 2, 0.15)
  ?menuTime >= 10
    titleX = SlideTowardX(titleSprite, titleX, 4, 0.075)

func DisplaySongTip()
  songTipTimer = 90

func EnqueueNote(noteTime, noteType)
  ?noteType = -1
    return
  var lane = noteType % 4
  var newNote = ui.AddAnim(note_sprites[lane])
  newNote.y = line_y - note_start_distance
  newNote.x = -(laneWidth * 3 / 2) + (laneWidth * lane)
  ?noteType >= 8
    var lastHoldObj = LastHoldInLane(lane)
    ?lastHoldObj ! 0
      lastHoldObj[3] = newNote
      newNote.color = lastHoldObj[0].color
    :
      newNote.Recycle()
      return
  :?noteType >= 4
    CreateHoldObject(lane, newNote)
  var noteData = [newNote,noteType, noteTime]
  noteQueue.Add(noteData)

func NextNoteInLane(lane)
  for note : noteQueue
    ?note[1] % 4 = lane
      return note
  return 0

func UpdateNotes()
  ?noteQueue.Count() > 0
    ?(totaltime + frameOffset) - noteQueue[0][2] > 5
      ?noteQueue[0][1] >= 4 & noteQueue[0][1] < 8
        var holdObject = NextHoldInLane(noteQueue[0][1] % 4)
        ?holdObject ! 0
          holdObject[0].Recycle()
          ?holdObject[3] ! 0
            for i = 0 .. noteQueue.Count()-1
              var note = noteQueue[i]
              ?note[0] = holdObject[3]
                note[0].Recycle()
                note.Clear()
                noteQueue.RemoveAt(i)
                break
          holdObject.Clear()
          holdNoteObjects.RemoveAt(holdNoteObjects.IndexOf(holdObject))
          misses++
      EvaluateNote(noteQueue[0])
    for note : noteQueue
      note[0].y = CalculateNotePosition(note[2])
  UpdateHolds()

func CalculateNotePosition(noteTime)
  var dist = ((totaltime - noteTime) * 1.0) / (queueTime * 1.0) * note_start_distance
  return math.RoundToInt(dist) + line_y

  
func CreateHoldObject(lane, originNote)
  var holdObject = ui.AddPanel()
  holdObject.style = hold_style
  holdObject.color = #white
  holdObject.x = originNote.x
  holdObject.w = 3
  holdObject.h = note_start_distance
  holdObject.y = originNote.y
  holdObject.anchor = bottom_center
  var objectData = [holdObject, lane, originNote, 0]
  holdNoteObjects.Add(objectData)

func NextHoldInLane(lane)
  for obj : holdNoteObjects
    ?obj[1] = lane
      return obj
  return 0

func LastHoldInLane(lane)
  var hold = 0
  for obj : holdNoteObjects
    ?obj[1] = lane
      hold = obj
  return hold

func UpdateHolds()
  for obj : holdNoteObjects
    ?obj[2] ! 0
      obj[0].y = obj[2].y
    ?obj[3] ! 0
      ?obj[3].y < obj[0].y - 2
        obj[0].h = obj[0].y - (obj[3].y + 1)
    :
      obj[0].h = note_start_distance

func EnqueueMessage(message, note)
  var newMessage = ui.AddText(message)
  newMessage.align = center
  ?Type(note) = int
    newMessage.x = -(laneWidth * 3 / 2) + (laneWidth * note)
    newMessage.y = line_y
  :
    newMessage.x = note.x
    newMessage.y = note.y
  ?message = "PERFECT"
    newMessage.color = #rainFF
  :?message = "GOOD"
    newMessage.color = #cyan
  :?message = "MISS"
    newMessage.color = #FF0000
  :
    newMessage.color = #white
  messageQueue.Add([newMessage, 6, newMessage.color])
  
func UpdateMessages()
  ?messageQueue.Count() = 0
    return
  var toRemove = []
  for i = 0 .. messageQueue.Count()-1
    var message = messageQueue[i]
    message[1] -= 1
    message[0].color = color.Lerp(#000000, message[2], (message[1] * 1.0) / 6.0)
    ?message[0].text = "PERFECT"
      message[0].color = RainLerp(message[0].color)
    ?message[1] = 0
      message[0].Recycle()
      toRemove.Add(message)
  ?toRemove.Count() > 0
    var messageQueueTemp = []
    for message : messageQueue
      ? !toRemove.Contains(message)
        messageQueueTemp.Add(message)
      :
        message.Clear()
    messageQueue = messageQueueTemp

func RainLerp(gray)
  return "#rain" + string.Sub(gray, 1, 2)


func EvaluateNote(note)
  noteQueue.RemoveAt(noteQueue.IndexOf(note))
  var message
  var thisScore
  var evaluations
  ?note[1] >= 8
    evaluations = [2, 4, 5]
  :
    evaluations = [1, 3, 5]
  var diff = math.Abs((totaltime + frameOffset) - note[2])
  ?diff > evaluations[2]
    message = "MISS"
    thisScore = 0
    combo = 0
    comboColor = #white
    misses++
  :?diff > evaluations[1]
    message = "OK"
    thisScore = scorePerNote * 0.5
    combo = 0
    comboColor = #white
    oks++
  :?diff > evaluations[0]
    message = "GOOD"
    thisScore = scorePerNote * 0.75
    combo++
    goods++
    ?comboColor ! #white
      comboColor = #cyan
  :
    message = "PERFECT"
    combo++
    perfects++
    thisScore = scorePerNote * 1.0
  currentScore += thisScore
  scoreTxt.text = string.Format("Score\n{0}", FormatScore(currentScore))
  scoreTxt.color = #white
  comboTxt.text = string.Format("Combo\n{0}", combo)
  comboTxt.color = comboColor
  comboTxt.visible = (combo > 1)
  EnqueueMessage(message, note[0])
  songUIPanel.Remove(note[0])
  note[0].Recycle()
  note.Clear()
  return message

func ToggleHitSFX()
  doSFX = !doSFX
  storage.Set("RTHM_SFX", doSFX)
  ?doSFX
    sfxBtn.tcolor = #green
    sfxBtn.text = "ON"
  :
    sfxBtn.tcolor = #505050
    sfxBtn.text = "OFF"

func SetBindsFromStorage()
  setBindings = storage.Get("RTHM_BINDINGS", 0) - 1
  ToggleBindings()

func ToggleBindings()
  setBindings++
  storage.Set("RTHM_BINDINGS", setBindings)
  setBindings = setBindings % 3
  ?setBindings = 0
    key.ResetBinds()
    bindingsBtn.text = "WASD/↑←↓→"
  :?setBindings = 1
    key.Bind("Left", "D")
    key.Bind("Down", "F")
    key.Bind("Up", "J")
    key.Bind("Right", "K")
    bindingsBtn.text = "DFJK"
  :
    key.Bind("Left", "H")
    key.Bind("Down", "J")
    key.Bind("Up", "K")
    key.Bind("Right", "L")
    bindingsBtn.text = "HJKL"
  ?keyText.Count() ! 0
    for i = 0..3
      keyText[i].text = binds[setBindings][i]
  
func HandleInputs()
  ?key = leftBegin
    HandleDownstroke(0)
  ?key = downBegin
    HandleDownstroke(1)
  ?key = upBegin
    HandleDownstroke(2)
  ?key = rightBegin
    HandleDownstroke(3)
    
  ?key = leftEnd
    HandleUpstroke(0)
  ?key = downEnd
    HandleUpstroke(1)
  ?key = upEnd
    HandleUpstroke(2)
  ?key = rightEnd
    HandleUpstroke(3)
  
  inputLane = InputToLane()
  ?inputLane ! -1
    ?key = primaryBegin
      HandleDownstroke(inputLane)
    :?key = primaryEnd
      for i = 0..3
        ?noteOnByLane[i]
          HandleUpstroke(i)
    :?inputLane ! lastInputLane
      for i = 0..3
        ?noteOnByLane[i]
          HandleUpstroke(i)
      HandleDownstroke(inputLane)
    lastInputLane = inputLane
  for i = 0..3
    ?i = inputLane
      laneCanvs[i].Set(" ")
    :
      laneCanvs[i].Set("#")
      

func InputToLane()
  ?key = primary & input.x - (screen.w / 2) >= -(laneWidth * 2) &
  ^ input.x - (screen.w / 2) <= laneWidth * 2
    return (input.x - (screen.w / 2) + (laneWidth * 2)) / laneWidth
  return -1

func HandleDownstroke(lane)
  ?doSFX
    play sword_hit
  var note = NextNoteInLane(lane)
  ?note ! 0 & math.Abs(note[2] - totaltime + frameOffset) <= 12
    var noteType = note[1]
    ?noteType < 8
      var message = EvaluateNote(note)
      ?noteType >= 4
        var holdObject = NextHoldInLane(lane)
        ?message ! "MISS"
          noteOnByLane[lane] = true
          holdObject[2] = 0
          holdObject[0].y = line_y
          holdObject[0].color = #yellow
          ?holdObject[3] ! 0
            holdObject[3].color = #yellow
        :
          misses++
          holdObject[0].Recycle()
          ?holdObject[3] ! 0
            for i = 0 .. noteQueue.Count()-1
              var note = noteQueue[i]
              ?note[0] = holdObject[3]
                note[0].Recycle()
                note.Clear()
                noteQueue.RemoveAt(i)
                break
          holdObject.Clear()
          holdNoteObjects.RemoveAt(holdNoteObjects.IndexOf(holdObject))
          
func HandleUpstroke(lane)
  ?noteOnByLane[lane]
    noteOnByLane[lane] = false
    var note = NextNoteInLane(lane)
    ?note ! 0 & note[1] >= 8
      EvaluateNote(note)
    :?note = 0
      EnqueueMessage("MISS", lane)
      combo = 0
      misses++
      comboColor = #white
      comboTxt.text = string.Format("Combo\n{0}", combo)
      comboTxt.color = comboColor
      comboTxt.visible = (combo > 1)
    var holdObject = NextHoldInLane(lane)
    ?holdObject ! 0
      holdObject[0].Recycle()
      holdObject.Clear()
      holdNoteObjects.RemoveAt(holdNoteObjects.IndexOf(holdObject))

func IncrOffset(btn)
  ?frameOffset < 5
    frameOffset++
    storage.Set("RTHM_FRAME_OFFSET", frameOffset)
    offsetTxt.text = "" + frameOffset

func DecrOffset(btn)
  ?frameOffset > -5
    frameOffset--
    storage.Set("RTHM_FRAME_OFFSET", frameOffset)
    offsetTxt.text = "" + frameOffset
    
func IncrSongOffset(btn)
  songStartOffset++
  storage.Set("RTHM_SONG_OFFSET", songStartOffset)
  songOffsetTxt.text = "" + songStartOffset

func DecrSongOffset(btn)
  songStartOffset--
  storage.Set("RTHM_SONG_OFFSET", songStartOffset)
  songOffsetTxt.text = "" + songStartOffset

func SelectPrevSong(btn)
  mapIndex--
  nextSongBtn.visible = true
  gameResultsPanel.visible = false
  resultsFCTxt.visible = false
  ?mapIndex = 0
    prevSongBtn.visible = false
  UpdateSongInfo()

func SelectNextSong(btn)
  mapIndex++
  prevSongBtn.visible = true
  gameResultsPanel.visible = false
  resultsFCTxt.visible = false
  ?mapIndex = 14
    nextSongBtn.visible = false
  UpdateSongInfo()

func QuitGame(btn)
  key.ResetBinds()
  loc.Leave()

func UpdateSongInfo()
  var newName = te.xt(song_names[mapIndex])
  songNameTxt.text = newName
  songNameTxt.y = 5 - (string.Size(newName) / 13)
  highScoreTxt.text = string.Format("Best:\n[color=#yellow]{0}[/color]",
  ^FormatScore(map_scores[mapIndex]))
  fcTxt.visible = map_fc[mapIndex]
  

func StartSong()
  music.Stop()
  currentMap = songs[mapIndex]
  tempo = maps_tempos[mapIndex]
  ?currentMap = "mushroom_boss"
    tempoChanges = [[334,172.5,"begin"],[582,176.0,"end"],
    ^ [582,180.0,"begin"],[899,183.0,"end"],[899,180.0,"off"],
    ^ [1059,180.0,"begin"],[1176,191.0,"end"],[1176,172.5,"off"]]
  :?currentMap = "rocky_plateau_fight"
    tempoChanges = [[2070,179.0,"off"],[2553,185.0,"off"]]
  :
    tempoChanges.Clear()
  lastTempo = tempo
  beatsElapsed = 0
  currentScore = 0
  songBallY = 0.0
  songBallSprite.y = 0
  combo = 0
  lastRunFC = false
  misses = 0
  oks = 0
  goods = 0
  perfects = 0
  comboColor = #rainFF
  queueTime = math.RoundToInt(note_display_beats / BeatsPerFrame(tempo))
  startTime = totaltime + queueTime
  scorePerNote = 1000000.0 / (all_maps_times[mapIndex].Count()-1) * 1.0
  stopTime = totaltime + queueTime + all_maps_times[mapIndex]
  ^[all_maps_times[mapIndex].Count()-1]
  isPlaying = true
  songUIPanel.visible = true
  menuUIPanel.visible = false
  fcTxt.visible = false
  gameResultsPanel.visible = false
  resultsFCTxt.visible = false
  UpdateSong()
  DisplaySongUI()

func StopSong()
  startTime = 0
  stopTime = 0
  currentMap = ""
  tempoChanges.Clear()
  noteQueue.Clear()
  messageQueue.Clear()
  holdNoteObjects.Clear()
  isPlaying = false
  UpdateScores()
  songUIPanel.visible = false
  comboTxt.visible = false
  menuUIPanel.visible = true
  menuTime = 0
  fcTxt.visible = map_fc[mapIndex]

func StartTest()
  music.Stop()
  currentScore = 0
  combo = 0
  tempo = 120.0
  lastTempo = tempo
  scorePerNote = 0
  queueTime = note_display_beats / BeatsPerFrame(tempo)
  isTesting = true
  testUIPanel.visible = true
  songUIPanel.visible = true
  menuUIPanel.visible = false
  fcTxt.visible = false
  gameResultsPanel.visible = false
  resultsFCTxt.visible = false
  fcTxt.visible = false

func QuitSong()
  ? !storage.Has("RTHM_SONG_OFFSET")
    DisplaySongTip()
  startTime = 0
  stopTime = 0
  tempoChanges.Clear()
  for note : noteQueue
    note[0].Recycle()
    note.Clear()
  noteQueue.Clear()
  for message : messageQueue
    message[0].Recycle()
    message.Clear()
  messageQueue.Clear()
  for object : holdNoteObjects
    object[0].Recycle()
    object.Clear()
  holdNoteObjects.Clear()
  isPlaying = false
  isTesting = false
  testUIPanel.visible = false
  songUIPanel.visible = false
  comboTxt.visible = false
  menuUIPanel.visible = true
  fcTxt.visible = map_fc[mapIndex]
  menuTime = 0
  music.Stop()

func UpdateScores()
  ?currentScore > map_scores[mapIndex]
    map_scores[mapIndex] = currentScore
    storage.Set(score_save_keys[mapIndex], currentScore)
  lastRunFC = (combo = all_maps_times[mapIndex].Count() - 1)
  ?lastRunFC
    map_fc[mapIndex] = true
    storage.Set(combo_save_keys[mapIndex], true)
  
  ?currentScore >= 1000000
    play treasure_item_lost
    resultsRankTxt.text = "P"
    resultsRankTxt.color = #rainFF
  :?currentScore >= 950000
    play treasure_item_red
    resultsRankTxt.text = "S"
    resultsRankTxt.color = #red
  :?currentScore >= 900000
    play treasure_item_blue
    resultsRankTxt.text = "A"
    resultsRankTxt.color = #blue
  :?currentScore >= 800000
    play treasure_item_green
    resultsRankTxt.text = "B"
    resultsRankTxt.color = #green
  :?currentScore >= 700000
    play treasure_item_yellow
    resultsRankTxt.text = "C"
    resultsRankTxt.color = #yellow
  :?currentScore >= 600000
    play treasure_item_cyan
    resultsRankTxt.text = "D"
    resultsRankTxt.color = #cyan
  :
    play treasure_item_show
    resultsRankTxt.text = "F"
    resultsRankTxt.color = #white
    
  ?currentScore < 700000 & !storage.Has("RTHM_SONG_OFFSET")
    DisplaySongTip()
  
  gameResultsPanel.visible = true
  resultsFCTxt.visible = lastRunFC
  resultsScoreTxt.text = FormatScore(currentScore)
  perfectsTxt.text = "" + perfects
  goodsTxt.text = "" + goods
  oksTxt.text = "" + oks
  missesTxt.text = "" + misses
  highScoreTxt.text = string.Format("Best:\n[color=#yellow]{0}[/color]",
  ^FormatScore(map_scores[mapIndex]))
  fcTxt.visible = map_fc[mapIndex]



func InitGame()
  ?sys.isPC
    laneWidth = 11
    line_y = 8
  :
    laneWidth = 15
    line_y = 6
  frameOffset = storage.Get("RTHM_FRAME_OFFSET", 0)
  songStartOffset = storage.Get("RTHM_SONG_OFFSET", 0)
  doSFX = storage.Get("RTHM_SFX", false)
  for i = 0..score_save_keys.Count()-1
    map_scores[i] = storage.Get(score_save_keys[i], 0)
    map_fc[i] = storage.Get(combo_save_keys[i], false)

func InitTitle()
  menuUIPanel = ui.AddPanel()
  menuUIPanel.w = screen.w + 4
  menuUIPanel.h = screen.h + 4
  
  menuBallSprite = ui.AddAnim(disco_sprite)
  menuBallSprite.y = -30
  menuBallSprite.anchor = bottom_center
  menuBallSprite.color = #808080
  menuBallSprite.loop = true
  menuBallSprite.duration = 15
  menuUIPanel.Add(menuBallSprite)
  
  titleSprite = ui.AddAnim(title_sprite)
  titleSprite.anchor = top_left
  titleSprite.dock = top_left
  titleSprite.x = -70
  titleSprite.y = 3
  menuUIPanel.Add(titleSprite)
  

func InitMenuUI()
  songNameTxt = ui.AddText()
  songNameTxt.h = 2
  songNameTxt.w = 12
  songNameTxt.align = center
  songNameTxt.text = te.xt(song_names[mapIndex])
  songNameTxt.y = 5 - (string.Size(te.xt(song_names[mapIndex])) / 12)
  menuUIPanel.Add(songNameTxt)
  
  prevSongBtn = ui.AddButton()
  prevSongBtn.w = 3
  prevSongBtn.h = 3
  prevSongBtn.x = -9
  prevSongBtn.y = 4
  prevSongBtn.SetPressed(SelectPrevSong)
  prevSongBtn.text = "«"
  menuUIPanel.Add(prevSongBtn)
  prevSongBtn.visible = false
  
  nextSongBtn = ui.AddButton()
  nextSongBtn.w = 3
  nextSongBtn.h = 3
  nextSongBtn.x = 8
  nextSongBtn.y = 4
  nextSongBtn.SetPressed(SelectNextSong)
  nextSongBtn.text = "»"
  menuUIPanel.Add(nextSongBtn)
  
  playBtn = ui.AddButton()
  playBtn.y = 8
  playBtn.text = te.xt("Play")
  playBtn.SetPressed(StartSong)
  menuUIPanel.Add(playBtn)
  
  highScoreTxt = ui.AddText()
  highScoreTxt.color = #white
  highScoreTxt.dock = center_right
  highScoreTxt.anchor = center_right
  highScoreTxt.h = 2
  highScoreTxt.w = 7
  highScoreTxt.y = 3
  highScoreTxt.x = -19
  highScoreTxt.text = string.Format("Best:\n[color=#yellow]{0}[/color]",
  ^FormatScore(map_scores[mapIndex]))
  menuUIPanel.Add(highScoreTxt)
  
  fcTxt = ui.AddText()
  fcTxt.color = #rainFF
  fcTxt.text = "FC"
  fcTxt.dock = center_right
  fcTxt.anchor = center_right
  fcTxt.h = 1
  fcTxt.x = -4
  fcTxt.y = 3
  fcTxt.align = right
  fcTxt.visible = map_fc[mapIndex]
  menuUIPanel.Add(fcTxt)
  
  gameQuitBtn = ui.AddButton()
  gameQuitBtn.dock = bottom_right
  gameQuitBtn.anchor = bottom_right
  gameQuitBtn.x = -2
  gameQuitBtn.y = -2
  gameQuitBtn.h = 3
  gameQuitBtn.w = string.Size(te.xt("Leave")) + 2
  gameQuitBtn.text = te.xt("Leave")
  gameQuitBtn.SetPressed(QuitGame)
  menuUIPanel.Add(gameQuitBtn)
  
  bindingsBtn = ui.AddButton()
  bindingsBtn.h = 4
  bindingsBtn.w = 11
  bindingsBtn.dock = center_left
  bindingsBtn.anchor = center_left
  bindingsBtn.y = 7
  bindingsBtn.x = 5
  bindingsBtn.tcolor = #green
  bindingsBtn.text = "WASD/↑←↓→"
  bindingsBtn.SetPressed(ToggleBindings)
  menuUIPanel.Add(bindingsBtn)
  
  bindingsLabel = ui.AddText("Keys:")
  bindingsLabel.h = 4
  bindingsLabel.w = 11
  bindingsLabel.dock = center_left
  bindingsLabel.anchor = center_left
  bindingsLabel.y = 8
  bindingsLabel.x = 5
  bindingsLabel.color = #white
  bindingsLabel.align = center
  menuUIPanel.Add(bindingsLabel)
  
  SetBindsFromStorage()
  ? !sys.isPC
    bindingsBtn.visible = false
    bindingsLabel.visible = false
  
  sfxBtn = ui.AddButton()
  sfxBtn.h = 4
  sfxBtn.w = 11
  sfxBtn.dock = center_left
  sfxBtn.anchor = center_left
  sfxBtn.y = 11
  sfxBtn.x = 5
  sfxBtn.SetPressed(ToggleHitSFX)
  ?doSFX
    sfxBtn.tcolor = #green
    sfxBtn.text = "ON"
  :
    sfxBtn.tcolor = #505050
    sfxBtn.text = "OFF"
  menuUIPanel.Add(sfxBtn)
  
  sfxLabel = ui.AddText("Hit SFX:")
  sfxLabel.h = 4
  sfxLabel.w = 11
  sfxLabel.dock = center_left
  sfxLabel.anchor = center_left
  sfxLabel.align = center
  sfxLabel.y = 12
  sfxLabel.x = 5
  sfxLabel.color = #white
  menuUIPanel.Add(sfxLabel)
  
  testBtn = ui.AddButton()
  testBtn.h = 4
  testBtn.w = 11
  testBtn.dock = center_left
  testBtn.anchor = center_left
  testBtn.y = 11
  testBtn.x = 17
  testBtn.text = "Test Play"
  testBtn.SetPressed(StartTest)
  menuUIPanel.Add(testBtn)
  
  
  gameResultsPanel = ui.AddPanel()
  gameResultsPanel.y = -3
  gameResultsPanel.h = 10
  gameResultsPanel.w = 26
  
  resultsTitleTxt = ui.AddText("Results")
  resultsTitleTxt.h = 1
  resultsTitleTxt.x = -1
  resultsTitleTxt.color = #white
  resultsTitleTxt.dock = top_center
  resultsTitleTxt.anchor = top_center
  resultsTitleTxt.align = center
  gameResultsPanel.Add(resultsTitleTxt)
  
  resultsLabels = ui.AddText("Score:\n\n\nPERFECT:\nGOOD:\nOK:\nMISS:")
  resultsLabels.h = 8
  resultsLabels.anchor = center_left
  resultsLabels.dock = center_left
  resultsLabels.x = 2
  resultsLabels.y = 1
  resultsLabels.color = #white
  gameResultsPanel.Add(resultsLabels)
  
  resultsScoreTxt = ui.AddText(FormatScore(currentScore))
  resultsScoreTxt.color = #yellow
  resultsScoreTxt.anchor = center_right
  resultsScoreTxt.dock = center_right
  resultsScoreTxt.h = 1
  resultsScoreTxt.align = right
  resultsScoreTxt.x = -2
  resultsScoreTxt.y = -3
  gameResultsPanel.Add(resultsScoreTxt)
  
  resultsRankTxt = ui.AddText("F")
  resultsRankTxt.color = #white
  resultsRankTxt.anchor = center_left
  resultsRankTxt.dock = center_left
  resultsRankTxt.h = 1
  resultsRankTxt.w = 1
  resultsRankTxt.x = 2
  resultsRankTxt.y = -2
  gameResultsPanel.Add(resultsRankTxt)
  
  resultsFCTxt = ui.AddText("Full Combo!")
  resultsFCTxt.color = #rainFF
  resultsFCTxt.anchor = center_right
  resultsFCTxt.dock = center_right
  resultsFCTxt.h = 1
  resultsFCTxt.w = 11
  resultsFCTxt.align = right
  resultsFCTxt.x = -2
  resultsFCTxt.y = -2
  gameResultsPanel.Add(resultsFCTxt)
  
  perfectsTxt = ui.AddText("" + perfects)
  perfectsTxt.color = #yellow
  perfectsTxt.anchor = center_right
  perfectsTxt.dock = center_right
  perfectsTxt.h = 1
  perfectsTxt.align = right
  perfectsTxt.x = -2
  perfectsTxt.y = 0
  gameResultsPanel.Add(perfectsTxt)
  
  goodsTxt = ui.AddText("" + goods)
  goodsTxt.color = #cyan
  goodsTxt.anchor = center_right
  goodsTxt.dock = center_right
  goodsTxt.h = 1
  goodsTxt.align = right
  goodsTxt.x = -2
  goodsTxt.y = 1
  gameResultsPanel.Add(goodsTxt)
  
  oksTxt = ui.AddText("" + oks)
  oksTxt.color = #white
  oksTxt.anchor = center_right
  oksTxt.dock = center_right
  oksTxt.h = 1
  oksTxt.align = right
  oksTxt.x = -2
  oksTxt.y = 2
  gameResultsPanel.Add(oksTxt)
  
  missesTxt = ui.AddText("" + misses)
  missesTxt.color = #FF0000
  missesTxt.anchor = center_right
  missesTxt.dock = center_right
  missesTxt.h = 1
  missesTxt.align = right
  missesTxt.x = -2
  missesTxt.y = 3
  gameResultsPanel.Add(missesTxt)
  
  gameResultsPanel.visible = false
  
  menuOn = true


func InitTestUI()
  testUIPanel = ui.AddPanel()
  testUIPanel.w = 13
  testUIPanel.h = 11
  testUIPanel.dock = center_right
  testUIPanel.anchor = center_right
  testUIPanel.x = -2
  
  offsetLabel = ui.AddText("Calibration")
  offsetLabel.color = #white
  offsetLabel.w = 13
  offsetLabel.align = center
  offsetLabel.h = 1
  offsetLabel.dock = top_center
  testUIPanel.Add(offsetLabel)
  
  lineLabel = ui.AddText("Visual Sync")
  lineLabel.color = #white
  lineLabel.w = 13
  lineLabel.align = center
  lineLabel.h = 1
  lineLabel.y = -3
  testUIPanel.Add(lineLabel)
  
  offsetTxt = ui.AddText()
  offsetTxt.h = 1
  offsetTxt.y = -1
  offsetTxt.color = #white
  offsetTxt.align = center
  offsetTxt.text = "" + frameOffset
  testUIPanel.Add(offsetTxt)
  
  incrBtn = ui.AddButton()
  incrBtn.w = 3
  incrBtn.h = 3
  incrBtn.x = 3
  incrBtn.y = -1
  incrBtn.SetPressed(IncrOffset)
  incrBtn.text = "»"
  testUIPanel.Add(incrBtn)
  
  decrBtn = ui.AddButton()
  decrBtn.w = 3
  decrBtn.h = 3
  decrBtn.x = -3
  decrBtn.y = -1
  decrBtn.SetPressed(DecrOffset)
  decrBtn.text = "«"
  testUIPanel.Add(decrBtn)
  
  songOffsetLabel = ui.AddText("Song Sync")
  songOffsetLabel.color = #white
  songOffsetLabel.w = 13
  songOffsetLabel.align = center
  songOffsetLabel.h = 1
  songOffsetLabel.y = 1
  testUIPanel.Add(songOffsetLabel)
  
  songOffsetTxt = ui.AddText()
  songOffsetTxt.h = 1
  songOffsetTxt.y = 3
  songOffsetTxt.color = #white
  songOffsetTxt.align = center
  songOffsetTxt.text = "" + songStartOffset
  testUIPanel.Add(songOffsetTxt)
  
  songIncrBtn = ui.AddButton()
  songIncrBtn.w = 3
  songIncrBtn.h = 3
  songIncrBtn.x = 3
  songIncrBtn.y = 3
  songIncrBtn.SetPressed(IncrSongOffset)
  songIncrBtn.text = "»"
  testUIPanel.Add(songIncrBtn)
  
  songDecrBtn = ui.AddButton()
  songDecrBtn.w = 3
  songDecrBtn.h = 3
  songDecrBtn.x = -3
  songDecrBtn.y = 3
  songDecrBtn.SetPressed(DecrSongOffset)
  songDecrBtn.text = "«"
  testUIPanel.Add(songDecrBtn)
  
  testUIPanel.visible = false
  

func InitSongUI()
  songUIPanel = ui.AddPanel()
  songUIPanel.w = screen.w + 4
  songUIPanel.h = screen.h + 4
  
  songBallSprite = ui.AddAnim(disco_sprite_small)
  songBallSprite.y = 0
  songBallSprite.x = -11
  songBallSprite.anchor = bottom_center
  songBallSprite.dock = top_right
  songBallSprite.color = #808080
  songBallSprite.loop = true
  songBallSprite.duration = 15
  songBallSprite.Play()
  songUIPanel.Add(songBallSprite)
  
  for i = 0 .. 3
    var newPnl = ui.AddPanel()
    newPnl.h = screen.h + 4
    newPnl.w = laneWidth
    newPnl.x = -(laneWidth * 3 / 2) + laneWidth * i
    newPnl.color = #505050
    laneBtns.Add(newPnl)
    songUIPanel.Add(newPnl)
    
    var newCnv = ui.AddCanvas()
    newCnv.w = laneWidth - 2
    newCnv.anchor = bottom_center
    newCnv.dock = bottom_center
    newCnv.y = -2
    newCnv.h = (screen.h / 2) - line_y + 10
    newCnv.SetBG(#202020)
    for i = 0..8
      for x = 0..newCnv.w
        newCnv.SetBG(x, i, color.Lerp(#000000, #202020, i/8.0))
    newCnv.Set("#")
    newPnl.Add(newCnv)
    laneCanvs.Add(newCnv)
    
    var newText = ui.AddText()
    newText.dock = bottom_center
    newText.x = -(laneWidth * 3 / 2) + laneWidth * i
    newText.y = -5
    newText.color = #white
    newText.text = binds[setBindings][i]
    ? !sys.isPC
      newText.visible = false
    keyText.Add(newText)
    songUIPanel.Add(newText)
  
  scoreTxt = ui.AddText()
  scoreTxt.dock = top_left
  scoreTxt.anchor = top_left
  scoreTxt.x = 2
  scoreTxt.y = 2
  scoreTxt.text = string.Format("Score\n{0}", FormatScore(currentScore))
  songUIPanel.Add(scoreTxt)
  
  comboTxt = ui.AddText()
  comboTxt.dock = top_right
  comboTxt.anchor = top_right
  comboTxt.align = right
  comboTxt.x = -2
  comboTxt.y = 2
  comboTxt.text = string.Format("Combo\n{0}", combo)
  comboTxt.visible = false
  comboTxt.color = comboColor
  songUIPanel.Add(comboTxt)
  
  evalLine = ui.AddPanel()
  evalLine.w = screen.w
  evalLine.h = 1
  evalLine.style = line_style
  evalLine.y = line_y
  songUIPanel.Add(evalLine)
  
  tempoText = ui.AddText("TEMPO UP")
  tempoText.dock = center_left
  tempoText.anchor = center_left
  tempoText.h = 1
  tempoText.w = 15
  tempoText.y = line_y - 1
  tempoText.x = 4
  tempoText.color = #9FFFFF
  tempoText.visible = false
  songUIPanel.Add(tempoText)
  
  songQuitBtn = ui.AddButton()
  songQuitBtn.dock = bottom_right
  songQuitBtn.anchor = bottom_right
  songQuitBtn.x = -2
  songQuitBtn.y = -2
  songQuitBtn.h = 3
  songQuitBtn.w = string.Size(te.xt("Leave")) + 2
  songQuitBtn.text = te.xt("Leave")
  songQuitBtn.SetPressed(QuitSong)
  songUIPanel.Add(songQuitBtn)
  
  songUIPanel.visible = false


func FormatScore(score)
  score = math.RoundToInt(score)
  ?score >= 1000000
    return "1000000"
  var scoreString = "" + score
  var finalString = ""
  for i = 1 .. 7 - string.Size(scoreString)
    finalString = finalString + "0"
  finalString = finalString + scoreString
  return finalString

func CalculateTempo()
  ?tempoChanges.Count() = 0 | totaltime - startTime < tempoChanges[0][0]
    return tempo
  for i = 0 .. tempoChanges.Count() - 1
    ?totaltime - startTime < tempoChanges[i][0]
      ?tempoChanges[i][2] = "end"
        var elapsed = (totaltime - startTime - tempoChanges[i-1][0] * 1.0) / 
        ^ (tempoChanges[i][0] - tempoChanges[i-1][0] * 1.0)
        return math.Lerp(tempoChanges[i-1][1], tempoChanges[i][1], elapsed)
      :
        return tempoChanges[i-1][1]
  return tempoChanges[tempoChanges.Count() - 1][1]

func BeatsPerFrame(t)
  return t / 1800.0

func Beat()
  beatTimeColor = #white
  ?isTesting
    EnqueueNote(totaltime + queueTime, 0)
    play click 200

func Beatween()
  var curr_between = beatsElapsed - math.Floor(beatsElapsed)
  beatTimeColor = color.Lerp(#white, #323232, curr_between)

func UpdateSong()
  ?totaltime = startTime + songStartOffset
    music.Play(currentMap)
  :?totaltime = stopTime
    music.Stop()
    play air_hiss
  
  UpdateMessages()
  UpdateNotes()
  HandleInputs()
  
  ?totaltime = stopTime + (queueTime * 2)
    StopSong()
  :?all_maps_times[mapIndex].Contains(totaltime - startTime + queueTime)
    var noteIndex = all_maps_times[mapIndex].
    ^IndexOf(totaltime - startTime + queueTime)
    EnqueueNote(totaltime + queueTime, all_maps_notes[mapIndex][noteIndex])
  tempo = CalculateTempo()
  ?tempo > lastTempo
    tempoText.text = "TEMPO UP"
    tempoText.color = #9FFFFF
    tempoChangeTimer = 50
  :?tempo < lastTempo
    tempoText.text = "TEMPO DOWN"
    tempoText.color = #FF9177
    tempoChangeTimer = 50
  
  lastTempo = tempo

func UpdateTest()
  UpdateMessages()
  UpdateNotes()
  HandleInputs()

func DisplaySongUI()
  ?math.Abs(beatsElapsed - math.Round(beatsElapsed)) < BeatsPerFrame(tempo) / 2
    Beat()
  :
    Beatween()
  
  ?currentScore > 700000 & songBallY ! 9
    songBallY = SlideTowardY(songBallSprite, songBallY, 9, 0.1)
  
  ?tempoChangeTimer > 0
    tempoChangeTimer--
    tempoChangeTime++
    tempoText.visible = (tempoChangeTime % 20 > 4)
  :
    tempoChangeTime = 0
    tempoText.visible = false
  evalLine.color = beatTimeColor
  beatsElapsed += BeatsPerFrame(tempo)



?loc = waterfall
  draw.Player((-screen.w / 2) + 10, 3)
  ?loc.begin
    InitGame()
    InitTitle()
    ambient.Stop()
    disable abilities
    disable hud
    disable banner
    disable pause
  ?ambient
    ambient.Stop()
  ?isPlaying
    UpdateSong()
    DisplaySongUI()
  :?isTesting
    UpdateTest()
    DisplaySongUI()
  :
    ?songTipTimer > 0
      songTipTimer--
      >`0,0,#FFFF00,@songTip@
    ? !menuOn
      AnimateTitle()
      ?menuTime = 0 | menuTime = 12
        play bronze_guardian_turbine
      :?menuTime = 30
        play ui_starnew
      :?menuTime = 55
        play ui_starfirst
    menuTime++
    ?menuTime = 120
      ? !menuOn
        InitMenuUI()
        InitSongUI()
        InitTestUI()
      music.Play("osteophone")
      menuBallSprite.Play()